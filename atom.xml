<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sansan.blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-05T02:56:23.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>三三</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WebStorm 使用技巧</title>
    <link href="http://yoursite.com/2018/01/05/WebStorm-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2018/01/05/WebStorm-使用技巧/</id>
    <published>2018-01-05T02:15:58.000Z</published>
    <updated>2018-01-05T02:56:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><p>command + g 或者command + f在当前文件中查找<br>command + shift + f 在某文件夹下查找<br>command + r 替换</p>
<h1 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h1><p>command + d 行复制<br>command + x 剪切行<br>ctrl + g 查找与当前选中的单词相同的单词<br>command + shift + ‘up/down方向键’ 上下移动选中的代码块<br>shift + enter 重新开始新的一行 （无论光标在何位置）<br>alt + ‘left/right方向键’ 以单词为单位移动光标<br>command + e 选择最近打开的文件<br>ctrl + tab 切换当前打开的文件<br>alt + ‘up/down方向键’ 向上/下选择代码块<br>command + 退格键 删除当前行</p>
<h1 id="view代码神器"><a href="#view代码神器" class="headerlink" title="view代码神器"></a>view代码神器</h1><p>command + p 显示参数信息<br>command + 点击 跳转到变量定义处<br>fn + alt + F7 查看当前变量在何处被调用过<br>fn+shift + F6 高级重命名变量<br>command + shift + c 复制当前文件的绝对路径</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;查找&quot;&gt;&lt;a href=&quot;#查找&quot; class=&quot;headerlink&quot; title=&quot;查找&quot;&gt;&lt;/a&gt;查找&lt;/h1&gt;&lt;p&gt;command + g 或者command + f在当前文件中查找&lt;br&gt;command + shift + f 在某文件夹下查找&lt;br&gt;c
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端疑惑记录</title>
    <link href="http://yoursite.com/2018/01/02/%E5%89%8D%E7%AB%AF%E7%96%91%E6%83%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/01/02/前端疑惑记录/</id>
    <published>2018-01-02T09:58:50.000Z</published>
    <updated>2018-01-05T03:30:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="“use-strict”"><a href="#“use-strict”" class="headerlink" title="“use strict”"></a>“use strict”</h1><p><b>ECMAscript 5添加了第二种运行模式：”严格模式”（strict mode）,顾名思义，这种模式使得Javascript在更严格的条件下运行。</b></p>
<ol>
<li>优点<br>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;消除代码运行的一些不安全之处，保证代码运行的安全提高编译器效率，增加运行速度;为未来新版本的Javascript做好铺垫。<br>“严格模式”体现了Javascript更合理、更安全、更严谨的发展方向，包括IE 10在内的主流浏览器，都已经支持它，许多大项目已经开始全面拥抱它。另一方面，同样的代码，在”严格模式”中，可能会有不一样的运行结果；一些在”正常模式”下可以运行的语句，在”严格模式”下将不能运行。</li>
<li><p>调用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"这是严格模式。"</span>);<span class="comment">/* 针对单个脚本 */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">strict</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="meta">　　　　"use strict"</span>;</div><div class="line">　　　　<span class="keyword">return</span> <span class="string">"这是严格模式。"</span>;</div><div class="line">　　&#125;</div><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">notStrict</span>(<span class="params"></span>) </span>&#123;</div><div class="line">　　　　<span class="keyword">return</span> <span class="string">"这是正常模式。"</span>;</div><div class="line">　　&#125;<span class="comment">/* 针对单个函数 */</span></div></pre></td></tr></table></figure>
</li>
<li><p>语法与行为改变<br>3.1 全局变量显式声明：在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line">　　v = <span class="number">1</span>; <span class="comment">// 报错，v未声明</span></div><div class="line">　　<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123; <span class="comment">// 报错，i未声明</span></div><div class="line">　　&#125;<span class="comment">/* 严格模式下，变量都必须先用var命令声明，然后再使用。 */</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>3.2 禁止this关键字指向全局对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">return</span> !<span class="keyword">this</span>;</div><div class="line">　　&#125; </div><div class="line">　　<span class="comment">// 返回false，因为"this"指向全局对象，"!this"就是false</span></div><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123; </div><div class="line"><span class="meta">　　　　"use strict"</span>;</div><div class="line">　　　　<span class="keyword">return</span> !<span class="keyword">this</span>;</div><div class="line">　　&#125; </div><div class="line">　　<span class="comment">// 返回true，因为严格模式下，this的值为undefined，所以"!this"为true。</span></div></pre></td></tr></table></figure></p>
<p>因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错。<br>3.3 禁止删除变量<br>严格模式下无法删除变量。只有configurable设置为true的对象属性，才能被删除。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line">　　<span class="keyword">var</span> x;</div><div class="line">　　<span class="keyword">delete</span> x; <span class="comment">// 语法错误</span></div><div class="line">　　<span class="keyword">var</span> o = <span class="built_in">Object</span>.create(<span class="literal">null</span>, &#123;<span class="string">'x'</span>: &#123;</div><div class="line">　　　　　　<span class="attr">value</span>: <span class="number">1</span>,</div><div class="line">　　　　　　<span class="attr">configurable</span>: <span class="literal">true</span></div><div class="line">　　&#125;&#125;);</div><div class="line">　　<span class="keyword">delete</span> o.x; <span class="comment">// 删除成功</span></div></pre></td></tr></table></figure></p>
<p>3.4 对象不能有重名的属性<br>正常模式下，如果对象有多个重名属性，最后赋值的那个属性会覆盖前面的值。严格模式下，这属于语法错误。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line">　　<span class="keyword">var</span> o = &#123;</div><div class="line">　　　　<span class="attr">p</span>: <span class="number">1</span>,</div><div class="line">　　　　<span class="attr">p</span>: <span class="number">2</span></div><div class="line">　　&#125;; <span class="comment">// 语法错误</span></div></pre></td></tr></table></figure></p>
<p>3.5 函数不能有重名的参数<br>正常模式下，如果函数有多个重名的参数，可以用arguments[i]读取。严格模式下，这属于语法错误。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a, a, b</span>) </span>&#123; <span class="comment">// 语法错误</span></div><div class="line">　　　　<span class="keyword">return</span> ;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<h1 id="JS原型与原型链"><a href="#JS原型与原型链" class="headerlink" title="JS原型与原型链"></a>JS原型与原型链</h1><p>在JavaScript中,一共有两种类型的值,原始值和对象值。每个对象都有一个内部属性 prototype ,我们通常称之为原型。原型的值可以是一个对象,也可以是null。如果它的值是一个对象，则这个对象也一定有自己的原型。这样就形成了一条线性的链，我们称之为原型链</p>
<ol>
<li>普通对象与函数对象<br>JavaScript 中，万物皆对象！但对象也是有区别的。分为普通对象和函数对象，Object ，Function 是JS自带的函数对象。凡是通过 new Function() 创建的对象都是函数对象，其他的都是普通对象。</li>
<li>原型对象(原型prototype)<br>在JavaScript 中，每当定义一个对象（函数）时候，对象中都会包含一些预定义的属性。其中函数对象的一个属性就是原型prototype。注：普通对象没有prototype,但有<strong>proto</strong>属性。<br>原型对象其实就是普通对象（Function.prototype除外,它是函数对象，但它很特殊，他没有prototype属性（前面说道函数对象都有prototype属性））。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;&#125;; </div><div class="line"><span class="built_in">console</span>.log(f1.prototype) <span class="comment">//f1&#123;&#125; </span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> f1. prototype) <span class="comment">//Object </span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Function</span>.prototype) <span class="comment">// Function，这个特殊 </span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Object</span>.prototype) <span class="comment">// Object </span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Function</span>.prototype.prototype) <span class="comment">//undefined</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>从这句console.log(f1.prototype) //f1 {} 的输出就结果可以看出，f1.prototype就是f1的一个实例对象。就是在f1创建的时候,创建了一个它的实例对象并赋值给它的prototype，基本过程如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> f1(); </div><div class="line">f1. prototype = temp;</div></pre></td></tr></table></figure></p>
<p>所以，Function.prototype为什么是函数对象就迎刃而解了，上文提到凡是new Function ()产生的对象都是函数对象，所以temp1是函数对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> temp1 = <span class="keyword">new</span> <span class="built_in">Function</span> (); </div><div class="line"><span class="built_in">Function</span>.prototype = temp1;</div></pre></td></tr></table></figure></p>
<p><b>原型对象是用来做什么的呢？主要作用是用于继承,共享它所包含的属性和方法</b><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123; </div><div class="line"><span class="keyword">this</span>.name = name </div><div class="line">&#125;; </div><div class="line">person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name; </div><div class="line">&#125; </div><div class="line"><span class="keyword">var</span> zjh = <span class="keyword">new</span> person(<span class="string">'zhangjiahao'</span>); </div><div class="line">zjh.getName(); <span class="comment">//zhangjiahao</span></div><div class="line"><span class="comment">// 通过给person.prototype设置了一个函数对象的属性，那有person实例（例中：zjh）出来的普通对象就继承了这个属性。</span></div></pre></td></tr></table></figure></p>
<p><b>prototype就是通过调用构造函数而创建的对象实例的原型对象。</b></p>
<ol>
<li>原型链<br>JS在创建对象（不论是普通对象还是函数对象）的时候，都有一个叫做<strong>proto</strong>的内置属性，用于指向创建它的函数对象的原型对象prototype。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(zjh.__proto__ === person.prototype) <span class="comment">//true</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>同样，person.prototype对象也有<strong>proto</strong>属性，它指向创建它的函数对象（Object）的prototype<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(person.prototype.__proto__ === <span class="built_in">Object</span>.prototype) <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>Object.prototype对象也有<strong>proto</strong>属性，但它比较特殊，为null<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__) <span class="comment">//null</span></div></pre></td></tr></table></figure></p>
<p><b>我们把这个有<strong>proto</strong>串起来的直到Object.prototype.<strong>proto</strong>为null的链叫做原型链</b><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> animal = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"><span class="keyword">var</span> dog = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"></div><div class="line">animal.price = <span class="number">2000</span>;<span class="comment">//</span></div><div class="line">dog.prototype = animal;</div><div class="line"><span class="keyword">var</span> tidy = <span class="keyword">new</span> dog();</div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(dog.price) <span class="comment">//为什么输出 undefined </span></div><div class="line"><span class="built_in">console</span>.log(tidy.price) <span class="comment">//为什么输出 2000</span></div><div class="line"><span class="comment">/* dog是函数对象，自生没有price属性，dog的__proto__是构造函数的prototype，为new Function()的prototype，Function()的prototype没有price属性所以undefined；</span></div><div class="line"> tidy是普通对象，自生没有price属性，tidy的__proto__是构造函数的prototype，为new dog()的prototype，dog的prototype为animal，而animal有price属性所以为2000.*/</div></pre></td></tr></table></figure></p>
<p><b>当在自生找不到某个属性或方法时，会在<strong>proto</strong>寻找原型上的属性或方法</b></p>
<h1 id="JavaScript的函数currying柯里化"><a href="#JavaScript的函数currying柯里化" class="headerlink" title="JavaScript的函数currying柯里化"></a>JavaScript的函数currying柯里化</h1><p><b>柯里化是指将使用多个参数的函数转换成一系列使用一个参数的函数的技术。</b><br>通用版本:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> currying = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> _args = [];</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, _args);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">Array</span>.prototype.push.apply(_args, [].slice.call(<span class="built_in">arguments</span>));</div><div class="line">        <span class="keyword">return</span> <span class="built_in">arguments</span>.callee;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> multi=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/* 简单应用 */</span></div><div class="line">    <span class="keyword">var</span> total = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, c; c = <span class="built_in">arguments</span>[i++];) &#123;</div><div class="line">        total += c;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> total;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> sum = currying(multi);  </div><div class="line">sum(<span class="number">100</span>,<span class="number">200</span>)(<span class="number">300</span>);</div><div class="line">sum(<span class="number">400</span>);</div><div class="line"><span class="built_in">console</span>.log(sum());     <span class="comment">// 1000  （空白调用时才真正计算）</span></div></pre></td></tr></table></figure></p>
<h1 id="理解CSS中BFC-Block-Formatting-Context-块格式化上下文"><a href="#理解CSS中BFC-Block-Formatting-Context-块格式化上下文" class="headerlink" title="理解CSS中BFC(Block Formatting Context:块格式化上下文)"></a>理解CSS中BFC(Block Formatting Context:块格式化上下文)</h1><p><b>BFC是Web页面中盒模型布局的CSS渲染模式。它的定位体系属于常规文档流。</b></p>
<ol>
<li>触发BFC<br>浮动，绝对定位元素，inline-blocks, table-cells, table-captions,和overflow的值不为visible的元素，（除了这个值已经被传到了视口的时候）将创建一个新的块级格式化上下文。<br><b>创建一个新的BFC的最佳方案：”overflow: hidden”</b></li>
<li>BFC导致的外边距折叠<br>BFC里：理论上两个兄弟元素之间的边距应该是来两个元素的边距之和（20px），但它实际上为10px。这就是被称为外边距折叠。当兄弟元素的外边距不一样时，将以最大的那个外边距为准。当然垂直外边距折叠只有他们是在同一BFC时才会发生</li>
<li>使用BFC来防止外边距折叠<br>如果他们属于不同的BFC，他们之间的外边距将不会折叠。所以通过创建一个新的BFC我们可以防止外边距折叠。<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Sibling 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Sibling 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"newBFC"</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span>Sibling 3<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123; <span class="attribute">background-color</span>: red; <span class="attribute">overflow</span>: hidden; <span class="comment">/* creates a block formatting context */</span> &#125; </div><div class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>; <span class="attribute">background-color</span>: lightgreen; &#125; </div><div class="line"><span class="selector-class">.newBFC</span> &#123; <span class="attribute">overflow</span>: hidden; <span class="comment">/* creates new block formatting context */</span> &#125;</div></pre></td></tr></table></figure>
<ol>
<li><p>使用BFC来包含浮动<br>一个容器里有浮动元素。由于这个原因，容器元素没有高度，它的浮动孩子将会脱离页面的常规流。我们通常使用清除浮动来解决这个问题，最受欢迎的方法是使用一个clearfix的伪类元素。但我们同样可以通过定义一个BFC来达到这个目的。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123; <span class="attribute">overflow</span>: hidden; <span class="comment">/* creates block formatting context */</span> <span class="attribute">background-color</span>: green; &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用BFC来防止文字环绕</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"floated"</span>&gt;</span>Floated div<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Quae hic ut ab perferendis sit quod architecto,dolor debitis quam rem provident aspernatur tempora expedita.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">overflow</span>: hidden;&#125;</div></pre></td></tr></table></figure>
<h1 id="TCP协议中的三次握手和四次挥手"><a href="#TCP协议中的三次握手和四次挥手" class="headerlink" title="TCP协议中的三次握手和四次挥手"></a>TCP协议中的三次握手和四次挥手</h1><p><b>TCP是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在TCP/IP协议中，TCP 协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号 并交换 TCP窗口大小信息。</b></p>
<ol>
<li>第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x;然后，客户端进入SYN_SEND状态，等待服务器的确认;</li>
<li>第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1);同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y;服务器端将上述所有信息放到一个报文段(即SYN+ACK报文段)中，一并发送给客户端，此时服务器进入SYN_RECV状态;</li>
<li>第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。<br><b>当客户端和服务器通过三次握手建立了TCP连接以后，当数据传送完毕，肯定是要断开TCP连接的啊。那对于TCP的断开连接，这里就有了神秘的“四次挥手”。</b></li>
<li>第一次挥手：主机1(可以使客户端，也可以是服务器端)，设置Sequence Number和Acknowledgment Number，向主机2发送一个FIN报文段;此时，主机1进入FIN_WAIT_1状态;这表示主机1没有数据要发送给主机2了;</li>
<li>第二次挥手：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1;主机1进入FIN_WAIT_2状态;主机2告诉主机1，我也没有数据要发送了，可以进行关闭连接了;</li>
<li>第三次挥手：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入CLOSE_WAIT状态;</li>
<li>第四次挥手：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态;主机2收到主机1的ACK报文段以后，就关闭连接;此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。<h1 id="http与https"><a href="#http与https" class="headerlink" title="http与https"></a>http与https</h1>https是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</li>
<li>HTTP 是不安全的，而 HTTPS 是安全的</li>
<li>HTTP 标准端口是80 ，而 HTTPS 的标准端口是443</li>
<li>在OSI 网络模型中，HTTP工作于应用层，而HTTPS 工作在传输层</li>
<li>HTTP 无法加密，而HTTPS 对传输的数据进行加密</li>
<li>HTTP无需证书，而HTTPS 需要CA机构wosign的颁发的SSL证书</li>
</ol>
<h1 id="setTimeout-和setInterval"><a href="#setTimeout-和setInterval" class="headerlink" title="setTimeout()和setInterval()"></a>setTimeout()和setInterval()</h1><p>setTimeout() 方法用于在指定的毫秒数后调用函数或计算表达式；而setInterval()则可以在每隔指定的毫秒数<b>循环</b>调用函数或表达式，直到clearInterval把它清除。<br>setTimeout(code,millisec)、setInterval(code,millisec[,”lang”])<br>setInterval只要一次计时完毕，插入回调之后不管回调执不执行就开始计时，这会出现一种情况，当我们插入回调的时候前队列有别的代码在执行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;“use-strict”&quot;&gt;&lt;a href=&quot;#“use-strict”&quot; class=&quot;headerlink&quot; title=&quot;“use strict”&quot;&gt;&lt;/a&gt;“use strict”&lt;/h1&gt;&lt;p&gt;&lt;b&gt;ECMAscript 5添加了第二种运行模式：”严格模
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css3新特性最佳实践</title>
    <link href="http://yoursite.com/2017/12/27/css3%E6%96%B0%E7%89%B9%E6%80%A7%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2017/12/27/css3新特性最佳实践/</id>
    <published>2017-12-27T07:16:47.000Z</published>
    <updated>2017-12-27T07:36:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="过渡-transition"><a href="#过渡-transition" class="headerlink" title="过渡(transition)"></a>过渡(transition)</h1><p>transition: CSS属性,花费时间,效果曲线(默认ease),延迟时间(默认0)<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*宽度从原始值到制定值的一个过渡，运动曲线ease,运动时间5秒，0.2秒后执行过渡*/</span></div><div class="line"><span class="selector-class">.btn</span>&#123;</div><div class="line"><span class="comment">/*宽度从原始值到制定值的一个过渡，运动曲线ease,运动时间0.5秒，0.2秒后执行过渡*/</span></div><div class="line"><span class="attribute">transition</span>:width,.<span class="number">5s</span>,ease,.<span class="number">2s</span>;</div><div class="line"><span class="comment">/*所有属性从原始值到制定值的一个过渡，运动曲线ease,运动时间0.5秒*/</span></div><div class="line"><span class="attribute">transition</span>:all,.<span class="number">5s</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li><p>hover效果(button)</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: all .<span class="number">5s</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>下拉菜单(显示下拉)<br>设置ul的过渡.ul-transition ul{transform-origin: 0 0;transition: all .5s;}</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.ul-transition</span> <span class="selector-tag">ul</span>&#123;</div><div class="line">    <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</div><div class="line">    <span class="attribute">transition</span>: all .<span class="number">5s</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;过渡-transition&quot;&gt;&lt;a href=&quot;#过渡-transition&quot; class=&quot;headerlink&quot; title=&quot;过渡(transition)&quot;&gt;&lt;/a&gt;过渡(transition)&lt;/h1&gt;&lt;p&gt;transition: CSS属性,花费时间,效
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>伪元素小技巧</title>
    <link href="http://yoursite.com/2017/12/27/%E4%BC%AA%E5%85%83%E7%B4%A0%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2017/12/27/伪元素小技巧/</id>
    <published>2017-12-27T06:39:58.000Z</published>
    <updated>2017-12-27T07:11:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">    <span class="attribute">content</span>:<span class="string">""</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">line-height</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">display</span>:block;</div><div class="line">    <span class="attribute">visibility</span>:hidden;</div><div class="line">    <span class="attribute">clear</span>:both ;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.clearfix</span>&#123;</div><div class="line">    <span class="attribute">zoom</span>:<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="画分割线"><a href="#画分割线" class="headerlink" title="画分割线"></a>画分割线</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">    <span class="attribute">margin-top</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:after</span>,<span class="selector-tag">p</span><span class="selector-pseudo">:before</span>&#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h1><ol>
<li>counter-reset: 属性创建或者重置一个或多个计数器；</li>
<li>counter-increment: 属性递增一个或多个计数器值；</li>
<li>content: 与:before 及:after 伪元素配合使用，来插入生成内容。<br><img src="/2017/12/27/伪元素小技巧/1.png" alt="1"><h1 id="css绘制平行四边形"><a href="#css绘制平行四边形" class="headerlink" title="css绘制平行四边形"></a>css绘制平行四边形</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.button</span> &#123;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">	<span class="attribute">display</span>: inline-block;</div><div class="line">	<span class="attribute">padding</span>: .<span class="number">5em</span> <span class="number">1em</span>;</div><div class="line">	<span class="attribute">border</span>: <span class="number">0</span>; <span class="attribute">margin</span>: .<span class="number">5em</span>;</div><div class="line">	<span class="attribute">background</span>: transparent;</div><div class="line">	<span class="attribute">color</span>: white;</div><div class="line">	<span class="attribute">text-transform</span>: uppercase;</div><div class="line">	<span class="attribute">text-decoration</span>: none;</div><div class="line">	<span class="attribute">font</span>: bold <span class="number">200%</span>/<span class="number">1</span> sans-serif;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.button</span><span class="selector-pseudo">::before</span> &#123;</div><div class="line">	<span class="attribute">content</span>: <span class="string">''</span>; <span class="comment">/* To generate the box */</span></div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">z-index</span>: -<span class="number">1</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#58a</span>;</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">skew</span>(45deg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="梯形标签页-tab页切换"><a href="#梯形标签页-tab页切换" class="headerlink" title="梯形标签页(tab页切换)"></a>梯形标签页(tab页切换)</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">40px</span>;</div><div class="line">	<span class="attribute">font</span>: <span class="number">130%</span>/<span class="number">2</span> Frutiger LT Std, sans-serif;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">nav</span> &#123;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">	<span class="attribute">z-index</span>: <span class="number">1</span>;</div><div class="line">	<span class="attribute">padding-left</span>: <span class="number">1em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">nav</span> &gt; <span class="selector-tag">a</span> &#123;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">	<span class="attribute">display</span>: inline-block;</div><div class="line">	<span class="attribute">padding</span>: .<span class="number">3em</span> <span class="number">1em</span> <span class="number">0</span>;</div><div class="line">	<span class="attribute">color</span>: inherit;</div><div class="line">	<span class="attribute">text-decoration</span>: none;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span> -.<span class="number">3em</span>;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="selector-tag">nav</span> &gt; <span class="selector-tag">a</span><span class="selector-pseudo">::before</span>,</div><div class="line"><span class="selector-tag">main</span> &#123;</div><div class="line">	<span class="attribute">border</span>: .<span class="number">1em</span> solid <span class="built_in">rgba</span>(0,0,0,.4);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">::before</span> &#123;</div><div class="line">	<span class="attribute">content</span>: <span class="string">''</span>; <span class="comment">/* To generate the box */</span></div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">z-index</span>: -<span class="number">1</span>;</div><div class="line">	<span class="attribute">border-bottom</span>: none;</div><div class="line">	<span class="attribute">border-radius</span>: .<span class="number">5em</span> .<span class="number">5em</span> <span class="number">0</span> <span class="number">0</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#ccc</span> <span class="built_in">linear-gradient</span>(hsla(0,0%,100%,.6), <span class="built_in">hsla</span>(0,0%,100%,0));</div><div class="line">	<span class="attribute">box-shadow</span>: <span class="number">0</span> .<span class="number">15em</span> white inset;</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">scale</span>(1.1, 1.3) <span class="built_in">perspective</span>(.5em) <span class="built_in">rotateX</span>(5deg);</div><div class="line">	<span class="attribute">transform-origin</span>: bottom;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span><span class="selector-class">.selected</span> &#123; <span class="attribute">z-index</span>: <span class="number">2</span>;&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span><span class="selector-class">.selected</span><span class="selector-pseudo">::before</span> &#123;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#eee</span>;</div><div class="line">	<span class="attribute">margin-bottom</span>: -.<span class="number">08em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">main</span> &#123;</div><div class="line">	<span class="attribute">display</span>: block;</div><div class="line">	<span class="attribute">margin-bottom</span>: <span class="number">1em</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#eee</span>;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">1em</span>;</div><div class="line">	<span class="attribute">border-radius</span>: .<span class="number">15em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">nav</span><span class="selector-class">.left</span> &gt; <span class="selector-tag">a</span><span class="selector-pseudo">::before</span> &#123;</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">scale</span>(1.2, 1.3) <span class="built_in">perspective</span>(.5em) <span class="built_in">rotateX</span>(5deg);</div><div class="line">	<span class="attribute">transform-origin</span>: bottom left;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">nav</span><span class="selector-class">.right</span> &#123; <span class="attribute">padding-left</span>: <span class="number">2em</span>; &#125;</div><div class="line"></div><div class="line"><span class="selector-tag">nav</span><span class="selector-class">.right</span> &gt; <span class="selector-tag">a</span><span class="selector-pseudo">::before</span> &#123;</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">scale</span>(1.2, 1.3) <span class="built_in">perspective</span>(.5em) <span class="built_in">rotateX</span>(5deg);</div><div class="line">	<span class="attribute">transform-origin</span>: bottom right;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"selected"</span>&gt;</span>Projects<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></div><div class="line">	Content area</div><div class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"selected"</span>&gt;</span>Projects<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></div><div class="line">	Content area</div><div class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"selected"</span>&gt;</span>Projects<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></div><div class="line">	Content area</div><div class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;清除浮动&quot;&gt;&lt;a href=&quot;#清除浮动&quot; class=&quot;headerlink&quot; title=&quot;清除浮动&quot;&gt;&lt;/a&gt;清除浮动&lt;/h1&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css技巧记录</title>
    <link href="http://yoursite.com/2017/12/25/css%E6%8A%80%E5%B7%A7%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2017/12/25/css技巧记录/</id>
    <published>2017-12-25T08:35:56.000Z</published>
    <updated>2018-01-05T02:13:58.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>title: css技巧记录<br>date: 2017-12-25 16:00:07</p>
<h2 id="tags"><a href="#tags" class="headerlink" title="tags:"></a>tags:</h2><p>1、 使用CSS复位<br>在不同的浏览器上保持一致的样式风格<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">* &#123;</div><div class="line">  box-sizing: border-box;//box-sizing管理CSS盒模型布局</div><div class="line">  margin: 0;</div><div class="line">  padding: 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、 使用 :not() 选择器来决定表单是否显示边框<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 添加边框 */</span></div><div class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:last-child)</span> &#123;</div><div class="line">  <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#666</span>;</div><div class="line">&#125;<span class="comment">/* .nav li + li或者 .nav li:first-child ~ li  */</span></div></pre></td></tr></table></figure></p>
<p>3、 为 body 元素添加行高(在body里面同一行高)<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</div><div class="line">&#125;<span class="comment">/* 不必为每一个 &lt;p&gt;，&lt;h*&gt; 元素逐一添加 line-height，直接添加到 body 元素 ,文本元素可以很容易地继承 body 的样式*/</span></div></pre></td></tr></table></figure></p>
<p>4、 垂直居中任何元素<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">-webkit-align-items</span>: center;  </div><div class="line">  <span class="attribute">-ms-flex-align</span>: center;  </div><div class="line">  <span class="attribute">align-items</span>: center;</div><div class="line">  <span class="attribute">display</span>: -webkit-flex;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5、 逗号分隔列表<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:last-child)</span><span class="selector-pseudo">::after</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">","</span>;</div><div class="line">&#125;<span class="comment">/* 使列表的每项都由逗号分隔 */</span></div></pre></td></tr></table></figure></p>
<p>6、 使用负的 nth-child 来选择元素</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 使用负的 nth-child 可以选择 1 至 n 个元素 */</span></div><div class="line"><span class="comment">/* 方法一 */</span></div><div class="line"><span class="selector-tag">li</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 选择第 1 至第 3 个元素并显示出来 */</span></div><div class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(-n+3)</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 方法二 */</span></div><div class="line"><span class="comment">/* 选择第 1 至第 3 个元素并显示出来 */</span></div><div class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:nth-child(-n+3))</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>7、 使用 SVG 图标<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.logo</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"logo.svg"</span>);</div><div class="line">&#125;<span class="comment">/* SVG 在所有分辨率下都可以良好缩放，并且支持所有 IE9 以后的浏览器 */</span></div><div class="line"><span class="comment">/* 针对仅有图标的按钮，如果 SVG 没有加载成功的话，以下样式对无障碍有所帮助 */</span></div><div class="line"><span class="selector-class">.no-svg</span> <span class="selector-class">.icon-only</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(aria-label);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>8、 通用选择器 (*) 和 相邻兄弟选择器 (+) 一起使用<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">* + * &#123;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">1.5em</span>;</div><div class="line">&#125;<span class="comment">/* 文档流中的所有的相邻兄弟元素将都将设置 margin-top: 1.5em 的样式 */</span></div></pre></td></tr></table></figure></p>
<p>9、 使用 max-height 来建立纯 CSS 的滑块<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.slider</span> &#123;</div><div class="line">  <span class="attribute">max-height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">overflow-y</span>: hidden;</div><div class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.slider</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">max-height</span>: <span class="number">600px</span>;</div><div class="line">  <span class="attribute">overflow-y</span>: scroll;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>10、 创造格子等宽的表格<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.calendar</span> &#123;</div><div class="line">  <span class="attribute">table-layout</span>: fixed;</div><div class="line">&#125;<span class="comment">/* table-layout: fixed 可以让每个格子保持等宽 */</span></div></pre></td></tr></table></figure></p>
<p>11、 利用 Flexbox 去除多余的外边距<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.list</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: space-between;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.list</span> <span class="selector-class">.person</span> &#123;</div><div class="line">  <span class="attribute">flex-basis</span>: <span class="number">23%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>12、 利用 Flexbox 去除多余的外边距<br>与其使用 nth-， first-， 和 last-child 去除列之间多余的间隙，不如使用 flexbox 的 space-between 属性：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.list</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: space-between;<span class="comment">/* 定义项目在主轴上的对齐方式:两端对齐，项目之间的间隔相等 */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.list</span> <span class="selector-class">.person</span> &#123;</div><div class="line">  <span class="attribute">flex-basis</span>: <span class="number">23%</span>;<span class="comment">/* 定义在分配多余空间之前，项目占据的主轴空间 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>13、 利用属性选择器来选择空链接<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^="http"]</span><span class="selector-pseudo">:empty</span><span class="selector-pseudo">::before</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(href);</div><div class="line">&#125;<span class="comment">/* 当 &lt;a&gt; 元素没有文本内容，但有 href 属性的时候，显示它的 href 属性 */</span></div></pre></td></tr></table></figure></p>
<p>14、 给 “默认” 链接定义样式<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span><span class="selector-attr">[href]</span><span class="selector-pseudo">:not(</span><span class="selector-attr">[class]</span>) &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#008000</span>;</div><div class="line">  <span class="attribute">text-decoration</span>: underline;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>15、 一致垂直节奏<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.intro</span> &gt; * &#123;</div><div class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1.25rem</span>;</div><div class="line">&#125;<span class="comment">/* 通用选择器 (*) 跟元素一起使用，可以保持一致的垂直节奏 */</span></div></pre></td></tr></table></figure></p>
<p>16、 固定比例盒子<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">padding-bottom</span>: <span class="number">20%</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">2px</span> dashed <span class="number">#ddd</span>;  </div><div class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">&#125;<span class="comment">/* 使用20％的padding-bottom使得框等于其宽度的20％的高度。与视口宽度无关，子元素的div将保持其宽高比（100％/ 20％= 5:1） */</span></div></pre></td></tr></table></figure></p>
<p>17、 为破碎图象定义样式<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">img</span> &#123;  </div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">font-family</span>: Helvetica, Arial, sans-serif;</div><div class="line">  <span class="attribute">font-weight</span>: <span class="number">300</span>;</div><div class="line">  <span class="attribute">height</span>: auto;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">2</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">&#125;<span class="comment">/* 以添加伪元素的法则来显示用户信息和URL的引用： */</span></div><div class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:before</span> &#123;  </div><div class="line">  <span class="attribute">content</span>: <span class="string">"We're sorry, the image below is broken :("</span>;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:after</span> &#123;  </div><div class="line">  <span class="attribute">content</span>: <span class="string">"(url: "</span> <span class="built_in">attr</span>(src) <span class="string">")"</span>;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>18、 用 rem 来调整全局大小；用 em 来调整局部大小<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h2</span> &#123; <span class="comment">/* 在根元素设置基本字体大小后 (html &#123; font-size: 100%; &#125;), 使用 em 设置文本元素的字体大小: */</span></div><div class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">1em</span>;</div><div class="line">&#125;<span class="comment">/* 然后设置模块的字体大小为 rem： */</span></div><div class="line"><span class="selector-tag">article</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">1.25rem</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">aside</span> <span class="selector-class">.module</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>: .<span class="number">9rem</span>;</div><div class="line">&#125;<span class="comment">/* 现在，每个模块变得独立，更容易、灵活的样式便于维护。 */</span></div></pre></td></tr></table></figure></p>
<p>19、 隐藏没有静音、自动播放的影片<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">video</span><span class="selector-attr">[autoplay]</span><span class="selector-pseudo">:not(</span><span class="selector-attr">[muted]</span>) &#123;<span class="comment">/* 避免在加载页面时自动播放。如果没有静音，则不显示视频： */</span></div><div class="line">  <span class="attribute">display</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>20、 使用选择器:root来控制字体弹性<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-pseudo">:root</span> &#123;<span class="comment">/* 在响应式布局中，字体大小应需要根据不同的视口进行调整。你可以计算字体大小根据视口高度的字体大小和宽度，这时需要用到:root: */</span></div><div class="line">  <span class="attribute">font-size</span>: <span class="built_in">calc</span>(1vw + 1vh + .5vmin);</div><div class="line">&#125;<span class="comment">/* 现在，您可以使用 root em： */</span></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">font</span>: <span class="number">1rem</span>/<span class="number">1.6</span> sans-serif;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>21、 为更好的移动体验，为表单元素设置字体大小<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="text"]</span>,</div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="number"]</span>,</div><div class="line"><span class="selector-tag">select</span>,</div><div class="line"><span class="selector-tag">textarea</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</div><div class="line">&#125;<span class="comment">/* 当触发&lt;select&gt;的下拉列表时，为了避免表单元素在移动浏览器（ios Safari 等等）上的缩放，加上font-size： */</span></div></pre></td></tr></table></figure></p>
<p>22、 使用text-indent来隐藏文本<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span> &#123;<span class="comment">/* 使用“text-indent”我们可以达到图片替换文本的效果，而且方便搜索引擎的优化，还能支持阅读器阅读网页内容 */</span></div><div class="line">       <span class="attribute">text-indent</span>:-<span class="number">9999px</span>;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</div><div class="line">    <span class="attribute">width</span>:<span class="number">400px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>:transparent <span class="built_in">url</span>(<span class="string">"images/logo.jpg"</span>) no-repeat scroll;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>23、 根据文件格式设置链接图标<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^="http:"]</span> &#123;</div><div class="line">        <span class="attribute">display</span>:inline-block;</div><div class="line">        <span class="attribute">padding-right</span>:<span class="number">14px</span>;</div><div class="line">        <span class="attribute">background</span>:transparent <span class="built_in">url</span>(/Images/ExternalLink.gif) center right no-repeat;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^="mailto:"]</span> &#123;</div><div class="line">        <span class="attribute">display</span>:inline-block;</div><div class="line">        <span class="attribute">padding-left</span>:<span class="number">20px</span>;</div><div class="line">        <span class="attribute">line-height</span>:<span class="number">18px</span>;</div><div class="line">        <span class="attribute">background</span>:transparent <span class="built_in">url</span>(/Images/MailTo.gif) center left no-repeat;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">a</span><span class="selector-attr">[href$='.pdf']</span> &#123;</div><div class="line">        <span class="attribute">display</span>:inline-block;</div><div class="line">        <span class="attribute">padding-left</span>:<span class="number">20px</span>;</div><div class="line">        <span class="attribute">line-height</span>:<span class="number">18px</span>;</div><div class="line">        <span class="attribute">background</span>:transparent <span class="built_in">url</span>(/Images/PDFIcon.gif) center left no-repeat;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">a</span><span class="selector-attr">[href$='.swf']</span>, <span class="selector-tag">a</span><span class="selector-attr">[href$='.fla']</span>, <span class="selector-tag">a</span><span class="selector-attr">[href$='.swd']</span> &#123;</div><div class="line">        <span class="attribute">display</span>:inline-block;</div><div class="line">        <span class="attribute">padding-left</span>:<span class="number">20px</span>;</div><div class="line">        <span class="attribute">line-height</span>:<span class="number">18px</span>;</div><div class="line">        <span class="attribute">background</span>:transparent <span class="built_in">url</span>(/Images/FlashIcon.gif) center left no-repeat;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">a</span><span class="selector-attr">[href$='.xls']</span>, <span class="selector-tag">a</span><span class="selector-attr">[href$='.csv']</span>, <span class="selector-tag">a</span><span class="selector-attr">[href$='.xlt']</span>, <span class="selector-tag">a</span><span class="selector-attr">[href$='.xlw']</span> &#123;</div><div class="line">        <span class="attribute">display</span>:inline-block;</div><div class="line">        <span class="attribute">padding-left</span>:<span class="number">20px</span>;</div><div class="line">        <span class="attribute">line-height</span>:<span class="number">18px</span>;</div><div class="line">        <span class="attribute">background</span>:transparent <span class="built_in">url</span>(/Images/ExcelIcon.gif) center left no-repeat;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">a</span><span class="selector-attr">[href$='.ppt']</span>, <span class="selector-tag">a</span><span class="selector-attr">[href$='.pps']</span> &#123;</div><div class="line">        <span class="attribute">display</span>:inline-block;</div><div class="line">        <span class="attribute">padding-left</span>:<span class="number">20px</span>;</div><div class="line">        <span class="attribute">line-height</span>:<span class="number">18px</span>;</div><div class="line">        <span class="attribute">background</span>:transparent <span class="built_in">url</span>(/Images/PowerPointIcon.gif) center left no-repeat;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">a</span><span class="selector-attr">[href$='.doc']</span>, <span class="selector-tag">a</span><span class="selector-attr">[href$='.rtf']</span>, <span class="selector-tag">a</span><span class="selector-attr">[href$='.txt']</span>, <span class="selector-tag">a</span><span class="selector-attr">[href$='.wps']</span> &#123;</div><div class="line">        <span class="attribute">display</span>:inline-block;</div><div class="line">        <span class="attribute">padding-left</span>:<span class="number">20px</span>;</div><div class="line">        <span class="attribute">line-height</span>:<span class="number">18px</span>;</div><div class="line">        <span class="attribute">background</span>:transparent <span class="built_in">url</span>(/Images/WordDocIcon.gif) center left no-repeat;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">a</span><span class="selector-attr">[href$='.zip']</span>, <span class="selector-tag">a</span><span class="selector-attr">[href$='.gzip']</span>, <span class="selector-tag">a</span><span class="selector-attr">[href$='.rar']</span> &#123;</div><div class="line">        <span class="attribute">display</span>:inline-block;</div><div class="line">        <span class="attribute">padding-left</span>:<span class="number">20px</span>;</div><div class="line">        <span class="attribute">line-height</span>:<span class="number">18px</span>;</div><div class="line">        <span class="attribute">background</span>:transparent <span class="built_in">url</span>(/Images/ZIPIcon.gif) center left no-repeat;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>24、 在IE浏览器中删除textarea的滚动条<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">textarea</span>&#123;</div><div class="line">    <span class="attribute">overflow</span>:auto;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>25、 段落首字下沉<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first-letter</span>&#123;</div><div class="line">    <span class="attribute">display</span>:block;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">5px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span>;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="attribute">color</span>:<span class="number">#FF3366</span>;</div><div class="line">    <span class="attribute">font-size</span>:<span class="number">60px</span>;</div><div class="line">    <span class="attribute">font-family</span>:Georgia;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>26、 所有浏览器下的CSS透明度<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.transparent</span> &#123;</div><div class="line">    <span class="comment">/* Fallback for web browsers that doesn't support RGBa */</span></div><div class="line">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(0, 0, 0);</div><div class="line">    <span class="comment">/* RGBa with 0.6 opacity */</span></div><div class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(0, 0, 0, 0.6);</div><div class="line">    <span class="comment">/* For IE 5.5 - 7*/</span></div><div class="line">    <span class="attribute">filter</span>:progid:DXImageTransform.Microsoft.<span class="built_in">gradient</span>(startColorstr=#99000000, endColorstr=#99000000);</div><div class="line">    <span class="comment">/* For IE 8*/</span></div><div class="line">    <span class="attribute">-ms-filter</span>: <span class="string">"progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000)"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>27、 图片预加载<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#preloader</span> &#123;<span class="comment">/* 这样当某个元素需要时，他就已经被加载了，此时就不会有任何延误或闪烁的现像：*/</span></div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(image1.jpg);</div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(image2.jpg);</div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(image3.jpg);</div><div class="line">    <span class="attribute">width</span>: <span class="number">0px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;</div><div class="line">    <span class="attribute">display</span>: inline;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>28、 固定页脚<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#footer</span> &#123;</div><div class="line">    <span class="attribute">position</span>:fixed;</div><div class="line">    <span class="attribute">left</span>:<span class="number">0px</span>;</div><div class="line">    <span class="attribute">bottom</span>:<span class="number">0px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">30px</span>;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</div><div class="line">    <span class="attribute">background</span>:<span class="number">#999</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* IE 6 */</span></div><div class="line">* <span class="selector-tag">html</span> <span class="selector-id">#footer</span> &#123;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">top</span>:<span class="built_in">expression</span>((0-(footer.offsetHeight)+(document.documentElement.clientHeight ? document.documentElement.clientHeight : document.body.clientHeight)+(ignoreMe = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop))+<span class="string">'px'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>29、 翻转图片<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">img</span><span class="selector-class">.flip</span> &#123;</div><div class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">scaleX</span>(-1);</div><div class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">scaleX</span>(-1);</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">scaleX</span>(-1);</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(-1);</div><div class="line">    <span class="attribute">filter</span>: FlipH;</div><div class="line">    <span class="attribute">-ms-filter</span>: <span class="string">"FlipH"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>30、 clearfix<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">    <span class="attribute">content</span>:<span class="string">""</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">line-height</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">display</span>:block;</div><div class="line">    <span class="attribute">visibility</span>:hidden;</div><div class="line">    <span class="attribute">clear</span>:both ;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.clearfix</span>&#123;</div><div class="line">    <span class="attribute">zoom</span>:<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>31、 简单的文字模糊效果<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">*&#123; </div><div class="line">    <span class="attribute">color</span>: transparent;</div><div class="line">    <span class="attribute">text-shadow</span>: <span class="number">#111</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>32、 鼠标移进网页里消失<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*&#123;</div><div class="line">    <span class="attribute">cursor</span>: none<span class="meta">!important</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>33、 多重边框<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.div</span> &#123;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.2), <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">12px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.2), <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">18px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.2), <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">24px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.2);</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</div><div class="line">    <span class="attribute">width</span>: <span class="number">400px</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;title: css技巧记录&lt;br&gt;date: 2017-12-25 16:00:07&lt;/p&gt;
&lt;h2 id=&quot;tags&quot;&gt;&lt;a href=&quot;#tags&quot; class=&quot;headerlink&quot; title=&quot;tags:&quot;&gt;&lt;/a&gt;tags:&lt;/h2&gt;&lt;p&gt;1、 使
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>docker命令记录</title>
    <link href="http://yoursite.com/2017/12/20/docker-%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/12/20/docker-学习/</id>
    <published>2017-12-20T02:35:29.000Z</published>
    <updated>2018-01-04T06:46:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker基本命令"><a href="#docker基本命令" class="headerlink" title="docker基本命令"></a>docker基本命令</h1><ul>
<li>brew cask install docker:Homebrew 的 Cask安装docker</li>
<li>docker –version:查看版本</li>
<li>docker info:查看docker是否存在，返回所有容器+镜像</li>
<li><p>docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]:获取镜像</p>
<blockquote>
<p>docker pull ubuntu:16.04</p>
</blockquote>
</li>
<li><p>docker run:创建容器</p>
<blockquote>
<p>docker run -i -t ubuntu /bin/bash</p>
</blockquote>
</li>
</ul>
<p>基于ubuntu镜像创建容器，在容器中执行/bin/bash命令启动Bash shell。</p>
<ul>
<li><p>/etc/hosts:linux 的/etc/hosts是配置ip地址和其对应主机名的文件</p>
<blockquote>
<p>cat /etc/hosts:查看/etc/hosts</p>
</blockquote>
</li>
<li><p>ps -aux:查看容器中运行进程</p>
</li>
<li>apt-get update &amp;&amp; apt-get install vim:软件安装（vim）</li>
<li>exit:返回到宿主机命令行（！只有在指定的/bin/bash命令处于运行状态时，容器才会相应的处于运行状态）</li>
<li>docker ps:正在运行的容器;docker ps -a:所有容器列表;docker ps -l:最后一次运行的容器</li>
<li>docker run –name xxx -i -t ubuntu /bin/bash:给创建的容器指定名称</li>
<li>docker rm xxx:删除容器；docker rm <code>docker ps -a -q</code>:删除所有容器，<b>运行中的容器是无法删除的。</b></li>
<li>docker start xxx:重新启动已经停止的容器</li>
<li>docker attach xxx: 附着到容器上，运行一个交互式回话shell（需要按一下enter）</li>
<li>whereis xxx:查找xxx</li>
<li>sudo docker run –name aofo -d ubuntu:14.04 /bin/sh -c “while true; do echo hello world; sleep 1; done”:创建守护式容器<br>守护式容器（daemonized container）:长期运行的容器,没有交互式会话，适合运行应用程序和服务,大多数时候是需要以守护式来运行容器。 -d 参数会让容器在后台运行</li>
<li>docker logs xxx:查看容器日志; docker logs -f xxx:添加-f参数来监听日志，ctrl+c来退出监控日志；docker logs –tail 10 xxx:获取日志的最后10行；docker logs –tail 0 -f xxx:跟踪某个容器的最新日志而不必读取整个日志文件；docker logs -ft xxx:-t参数为每条日志加上时间戳。</li>
<li>docker top xxx:查看容器内的所有进程</li>
<li><p>docker exec:在容器内部额外启动新进程</p>
<blockquote>
<p>docker exec -d daemon aofo touch /etc/new_config_file:-d标志标明要运行一个后台进程，后面指定要在内部执行这个命令的容器名,在容器内创建了一个空文件夹new_config_file。<br>docker exec -t -i aofo /bin/bash:在容器中创建一个新的bash会话</p>
</blockquote>
</li>
<li><p>docker stop xxx:停止容器</p>
</li>
<li>docker kill xxx:快速停止容器</li>
<li>docker run –restart=always –name xxx -d ubuntu /bin/bash -c “while true;do echo hello world;sleep 1;done”:除了always，不管退出代码是什么都会重启该容器，–restart=on-failure:5接受一个可选的重启次数参数，即最多重启5次。</li>
<li>docker inspect:获取更多的容器消息</li>
<li>docker history xxx:查看镜像是如何构建的</li>
<li>docker run –name xxx -i -t -w /var/log ubuntu pwd:-w标志在运行时覆盖工作目录，即容器内的工作目录为/var/log</li>
</ul>
<h1 id="docker镜像"><a href="#docker镜像" class="headerlink" title="docker镜像"></a>docker镜像</h1><p><b>本地镜像都保存在Docker宿主机的/var/lib/docker目录下。每个镜像都保存在Docker所采用的存储驱动目录下。也可以在/var/lib/docker/containers目录下面看到所有的容器</b></p>
<ul>
<li>docker images:列出镜像</li>
<li>docker pull xxx:拉取镜像</li>
<li>docker search xxx:查找所有Docker Hub上公共的可用镜像</li>
<li>使用:+tag(标签名)来准确的指定容器的镜像</li>
<li>docker commit/docker build命令和Dockerfile文件,推荐后者，更灵活更强大。</li>
<li>docker login:登录到Docker Hub</li>
<li><p>用 commit 命令创建镜像：</p>
<ol>
<li>docker run -i -t ubuntu /bin/bash：创建一个新容器；</li>
<li>apt-get -yqq update;    apt-get -y install apache2  :安装Apache</li>
<li>先用exit命令退出容器， 再docker commit 614122c0aabb aoct/apache2：指定了要提交的修改过的容器的ID、目标镜像仓库、镜像名，把这个容器作为一个Web服务器来运行,需要把它当前状态保存下来，就不必每次都创建一个新容器并再次安装Apache；</li>
<li>docker commit -m=’A new image’ –author=’Aomine’ 614122c0aabb aoct/apache2:像git一样，在提交镜像时指定更多信息来描述所做的修改</li>
<li>docker run -t -i aoct/apache2 /bin/bash:docker run命令从刚创建的新镜像运行一个容器</li>
</ol>
</li>
<li><p>用Dockerfile构建镜像</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Version:0.0.1</span></div><div class="line"><span class="comment">#指定一个已经存在的镜像</span></div><div class="line"><span class="keyword">FROM</span> ubuntu <span class="number">16.04</span></div><div class="line"><span class="comment">#该镜像的作者及作者的电子邮件地址</span></div><div class="line"><span class="keyword">MAINTAINER</span> sansan <span class="string">"15000876069@163.com"</span></div><div class="line"><span class="keyword">RUN</span> apt-get update&amp;&amp;apt-get install -y nginx</div><div class="line"><span class="keyword">RUN</span> echo 'HI,container' \</div><div class="line">    &gt;/usr/share/nginx/html/index.html</div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>1、每条指令必须为大写；<br>2、指令会按顺序从上到下执行；</p>
<blockquote>
<p>docker build -t=”sansan/static_web:v1” .</p>
</blockquote>
<p>-t选项为新镜像设置了仓库(sansan)和名称(static_web):后为标签，如果没有指定任何标签，会自动为镜像设置一个latest标签，”.”告诉docker在本地目录去找Dockerfile,也可以指定一个Git仓库的源地址。</p>
<blockquote>
<p>docker build –no-cache -t=”sansan/static_web:v1” .</p>
</blockquote>
<p>–no-cache确保构建过程不会使用缓存</p>
<ul>
<li>基于构建缓存的Dockerfile模板<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></div><div class="line"><span class="keyword">MAINTAINER</span> James Turnbull <span class="string">"liaojiafa@qq.com"</span></div><div class="line"><span class="keyword">ENV</span> REFRESHED_AT <span class="number">2016</span>-<span class="number">12</span>-<span class="number">05</span></div><div class="line"><span class="keyword">RUN</span> apt-get -qq update</div></pre></td></tr></table></figure>
</li>
</ul>
<p>有了这个模版，如果想刷新一个构建，只需要修改ENV指令中的日期。这使DOcker在命令中ENV指令时开始重置这个缓存，并运行后续指令而无需依赖该缓存。也就是说，RUN apt-get update这条指令就会被再次执行，包缓存也会被刷新为最新内容</p>
<ul>
<li>从新镜像启动容器<br>docker run -d -p 80 –name static_web sansan/static_web nginx -g “daemon off;”<br>-d选项告诉docker以分离(detached)的方式在后台运行，-p用来控制docker在运行时应该公开哪些端口给外部(宿主机)<br>docker port 容器ID 容器端口号：返回宿主机映射端口<br>docker run -d -p 8080:80 –name static_web sansan/static_web nginx -g “daemon off;”<br>将容器80端口绑定到宿主机8080端口<br>docker run -d -p 127.0.0.1:8080:80 –name static_web sansan/static_web nginx -g “daemon off;”<br>将容器80端口绑定到特定的网络接口<br>docker run -d -p 127.0.0.1::80 –name static_web sansan/static_web nginx -g “daemon off;”<br>也可以不指定</li>
<li>Dockerfile指令(docker推荐用数组语法来设置要执行的命令[“xx”,”xx”,”xx”])<br>1、CMD(指定容器启动时执行的命令)<br>2、RUN(容器构建时执行的命令):RUN命令可以覆盖CMD指令<br>3、ENTRYPOINT(配置容器启动后执行的命令，并且不可被docker run 提供的参数覆盖。每个Dockerfile中只能有一个ENTRYPOINT，当指定多个ENTRYPOINT时，只有最后一个生效。和CMD相似，却有不同。)<br>4、WORKDIR(镜像创建一个新容器时定义工作目录，如果容器中没有此目录，会自动创建)<br>5、ENV(在镜像构建过程中设置环境变量):ENV RVM_PATH /home/rvm<br>6、VOLUME(向基于镜像创建的容器添加卷)<br>7、ADD(将构建环境下的文件和目录复制到镜像中)<br>8、COPY(和ADD类似，但不会去做文件提取和解压工作)<br>9、ONBUILD(为镜像添加触发器trigger)：ONBUILD命令可以在镜像上运行docker inspect查看<br>10、为apache2镜像构建一个Dockerfile<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span> </div><div class="line"><span class="keyword">MAINTAINER</span> sansan <span class="string">"15000876069@163.com"</span></div><div class="line"><span class="keyword">RUN</span> apt-get update&amp;&amp;apt-get install -y apache2</div><div class="line"><span class="keyword">ENV</span> APACHE_RUN_USER www-data</div><div class="line"><span class="keyword">ENV</span> APACHE_RUN_GROUP www-data</div><div class="line"><span class="keyword">ENV</span> APACHE_LOG_DIR /var/log/apache2</div><div class="line"><span class="keyword">ONBUILD</span> <span class="keyword">ADD</span> . /var/www/</div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></div><div class="line"><span class="keyword">ENTRYPOINT</span> ["/usr/sbin/apache2"]</div><div class="line"><span class="keyword">CMD</span> ["-D","FOREGROUND"]</div></pre></td></tr></table></figure>
</li>
</ul>
<p>我们可以将这个Dockerfile作为一个通用的web应用程序的模板，基于这个模板来构建web应用程序<br><b>ONBUILD ADD . /var/www/:该指令会使用ADD指令将构建环境所在目录下内容全部添加到镜像中的/var/www/目录下</b><br>使用模板来构建webapp镜像：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> sansan/apache2</div><div class="line"><span class="keyword">MAINTAINER</span> sansan <span class="string">"15000876069@163.com"</span></div><div class="line"><span class="keyword">ENV</span> APPLICATION_NAME webapp</div><div class="line"><span class="keyword">ENV</span> ENVIRONMENT development</div></pre></td></tr></table></figure></p>
<p>11、将镜像推送到Docker Hub</p>
<blockquote>
<p>docker push xxx</p>
</blockquote>
<p>注意：tag的名字斜线前面部分如果跟Docker Hub姓名不一致会导致push失败需要使用docker tag重命名：</p>
<blockquote>
<p>docker push oldname newname</p>
</blockquote>
<p>12、自动构建<br>只需将GitHub或BitBucket中含有Dockerfile文件的仓库连接到Docker Hub即可，只能通过更新GitHub仓库来更新自动构建<br>13、删除镜像</p>
<blockquote>
<p>docker rmi xxx:该操作只会将本地镜像删除，GitHub依然存在。删除多个：docker rmi xxx yyy</p>
</blockquote>
<p>14、运行自己的Docker Registry</p>
<ul>
<li>从容器运行Registry:docker run -d -p 5000:5000 –restart=always –name registry registry</li>
<li>使用这个Registr为本地镜像打上标签:docker tag 9043319a1906 127.0.0.1:5000/sansan/webapp</li>
<li>将镜像推送到新的Registry:docker push 127.0.0.1:5000/sansan/webapp</li>
<li>将其用于使用docker run 构建新容器:docker run -i -t 127.0.0.1:5000/sansan/webapp /bin/bash</li>
</ul>
<h1 id="在测试中使用docker"><a href="#在测试中使用docker" class="headerlink" title="在测试中使用docker"></a>在测试中使用docker</h1><p>1、静态网站：<a href="http://blog.csdn.net/alive2012/article/details/51871972" target="_blank" rel="external">Docker使用—静态网站测试</a></p>
<p>2、web应用程序：<a href="http://blog.csdn.net/alive2012/article/details/51881360" target="_blank" rel="external">Docker构建并测试Web应用程序</a><br>下载Sinatra Web应用程序源码：</p>
<blockquote>
<p>wget –cut-dirs=3 -nH -r –no-parent <a href="http://dockerbook.com/code/5/sinatra/webapp/" target="_blank" rel="external">http://dockerbook.com/code/5/sinatra/webapp/</a></p>
</blockquote>
<p>保证webapp/bin/webapp文件可以执行</p>
<blockquote>
<p>chmod +x $PWD/webapp/bin/webapp</p>
</blockquote>
<p>3、使用docker构建第一个Java应用服务</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;docker基本命令&quot;&gt;&lt;a href=&quot;#docker基本命令&quot; class=&quot;headerlink&quot; title=&quot;docker基本命令&quot;&gt;&lt;/a&gt;docker基本命令&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;brew cask install docker:Homebre
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常见术语翻译</title>
    <link href="http://yoursite.com/2017/12/15/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E6%9C%AF%E8%AF%AD%E7%BF%BB%E8%AF%91/"/>
    <id>http://yoursite.com/2017/12/15/前端常见术语翻译/</id>
    <published>2017-12-15T07:24:45.000Z</published>
    <updated>2018-01-05T03:16:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见术语"><a href="#常见术语" class="headerlink" title="常见术语"></a>常见术语</h1><ul>
<li>ReferenceError:引用错误</li>
<li>SyntaxError:语法错误</li>
<li>module bundler:模块打包器</li>
<li>Master: 主设备;Slave:从设备</li>
<li>Linux distribution:Linux发行版本</li>
<li>registry:注册表</li>
<li>executor:执行者</li>
<li>hack:为了兼容不同的浏览器写不同的css代码</li>
</ul>
<h1 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h1><ul>
<li>npm run dev:以本地服务器的端口启动这个工程,关于本地服务器的配置信息，在工程根目录的webpack.config.js中:</li>
<li>npm config get proxy:查看npm代理设置</li>
<li>npm config set proxy null：设置npm代理为null</li>
<li>lsof -i:xxxx:查看占用端口进程</li>
<li>kill xxx(PID):杀死进程</li>
<li>lsof -n -P -i TCP -s TCP:LISTEN:lsof命令可以列出当前的所有网络情况， 此命令的解释如下：-n 表示主机以ip地址显示-P 表示端口以数字形式显示，默认为端口名称-i 意义较多，具体 man lsof, 主要是用来过滤lsof的输出结果-s 和 -i 配合使用，用于过滤输出</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;常见术语&quot;&gt;&lt;a href=&quot;#常见术语&quot; class=&quot;headerlink&quot; title=&quot;常见术语&quot;&gt;&lt;/a&gt;常见术语&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;ReferenceError:引用错误&lt;/li&gt;
&lt;li&gt;SyntaxError:语法错误&lt;/li&gt;
&lt;li&gt;m
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Promise 初解</title>
    <link href="http://yoursite.com/2017/12/15/Promise-%E5%88%9D%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/12/15/Promise-初解/</id>
    <published>2017-12-15T03:04:58.000Z</published>
    <updated>2017-12-28T06:00:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><b>Promise 对象用于一个异步操作的最终完成（或失败）及其结果值的表示。(简单点说就是处理异步请求。Promise就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果，相对传统方案来说避免了层层嵌套的回调函数</b><br><a id="more"></a><br>Promise三种状态:pending(进行中)、fulfilled 或 rejected</p>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="comment">// ... some code</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</div><div class="line">    resolve(value);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    reject(error);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>executor 函数在Promise<b>构造函数执行时同步执行<b>，被传递 resolve 和 reject 函数（executor 函数在Promise构造函数返回新建对象前被调用）。resolve 和 reject 函数被调用时，分别将promise的状态改为fulfilled（完成）或rejected（失败）。executor 内部通常会执行一些异步操作，一旦完成，可以调用resolve函数来将promise状态改成fulfilled，或者在发生错误时将它的状态改为rejected。<br>如果在executor函数中抛出一个错误，那么该promise 状态为rejected。executor函数的返回值被忽略。</b></b></p>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><p>（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。<br>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。<br>Promise 新建后就会立即执行:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Promise'</span>);</div><div class="line">  resolve();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'resolved.'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Hi!'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Promise</span></div><div class="line"><span class="comment">// Hi!</span></div><div class="line"><span class="comment">// resolved</span></div></pre></td></tr></table></figure></p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>1、Promise构造函数是同步执行的，promise.then中的函数是异步执行的。<br>2、.then 或者 .catch 的参数期望是函数，传入非函数则会发生值穿透即把值往后传或者抛。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;b&gt;Promise 对象用于一个异步操作的最终完成（或失败）及其结果值的表示。(简单点说就是处理异步请求。Promise就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果，相对传统方案来说避免了层层嵌套的回调函数&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>http详解</title>
    <link href="http://yoursite.com/2017/12/11/http%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/12/11/http详解/</id>
    <published>2017-12-11T07:00:06.000Z</published>
    <updated>2018-01-04T02:22:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><b>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网服务器传输超文本到本地浏览器的传送协议</b><br><a id="more"></a></p>
<h1 id="HTTP简介"><a href="#HTTP简介" class="headerlink" title="HTTP简介"></a>HTTP简介</h1><ul>
<li>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）.</li>
<li>HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求,Web服务器根据接收到的请求后，向客户端发送响应信息.</li>
</ul>
<h1 id="HTTP特点"><a href="#HTTP特点" class="headerlink" title="HTTP特点"></a>HTTP特点</h1><ul>
<li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快；</li>
<li>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记；</li>
<li>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间；</li>
<li>无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快</li>
<li>支持B/S及C/S模式</li>
</ul>
<h1 id="HTTP之URL"><a href="#HTTP之URL" class="headerlink" title="HTTP之URL"></a>HTTP之URL</h1><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息<br>URL,全称是Uniform Resource Locator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。<br>普通URL的各部分组成：</p>
<ul>
<li>1.协议部分：该URL的协议部分为“http：”(ftp、https)在”HTTP”后面的“//”为分隔符;</li>
<li>2.域名部分;</li>
<li>3.端口部分;</li>
<li>4.虚拟目录部分;</li>
<li>5.文件名部分;</li>
<li>6.锚部分：从“#”开始到最后;</li>
<li>7.参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。</li>
</ul>
<h1 id="URI和URL的区别"><a href="#URI和URL的区别" class="headerlink" title="URI和URL的区别"></a>URI和URL的区别</h1><ul>
<li>URI是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的URI一般由三部组成：①访问资源的命名机制②存放资源的主机名③资源自身的名称，由路径表示，着重强调于资源。</li>
<li>URL是uniform resource locator，统一资源定位器，它是一种<b>具体的URI</b>，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。</li>
<li>URN，uniform resource name，统一资源命名，是通过名字来标识资源，比如mailto:java-net@java.sun.com。</li>
</ul>
<p>URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL和URN都是一种URI。笼统地说，每个 URL 都是 URI，但不一定每个 URI 都是 URL。这是因为 URI 还包括一个子类，即统一资源名称 (URN)，它命名资源但不指定如何定位资源。上面的 mailto、news 和 isbn URI 都是 URN 的示例。</p>
<h1 id="HTTP之请求消息Request"><a href="#HTTP之请求消息Request" class="headerlink" title="HTTP之请求消息Request"></a>HTTP之请求消息Request</h1><p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分。<br><img src="/2017/12/11/http详解/1.png" alt="request"><br><img src="/2017/12/11/http详解/2.png" alt="request"></p>
<h1 id="HTTP之响应消息Response"><a href="#HTTP之响应消息Response" class="headerlink" title="HTTP之响应消息Response"></a>HTTP之响应消息Response</h1><p>一般情况下，服务器接收并处理客户端发过来的请求后会返回一个HTTP的响应消息。HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。<br><img src="/2017/12/11/http详解/3.png" alt="Response"><br>第一部分：状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。<br>第二部分：消息报头，用来说明客户端要使用的一些附加信息(Date:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8)<br>第三部分：空行，消息报头后面的空行是必须的<br>第四部分：响应正文，服务器返回给客户端的文本信息。</p>
<h1 id="HTTP之状态码"><a href="#HTTP之状态码" class="headerlink" title="HTTP之状态码"></a>HTTP之状态码</h1><p><b>状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别:</b><br>1xx：指示信息–表示请求已接收，继续处理<br>2xx：成功–表示请求已被成功接收、理解、接受<br>3xx：重定向–要完成请求必须进行更进一步的操作<br>4xx：客户端错误–请求有语法错误或请求无法实现<br>5xx：服务器端错误–服务器未能实现合法的请求<br><b>常见状态码：</b><br>200 OK                        //客户端请求成功<br>400 Bad Request               //客户端请求有语法错误，不能被服务器所理解<br>401 Unauthorized              //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用<br>403 Forbidden                 //服务器收到请求，但是拒绝提供服务<br>404 Not Found                 //请求资源不存在，eg：输入了错误的URL<br>500 Internal Server Error     //服务器发生不可预期的错误<br>503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后可能恢复正常</p>
<h1 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h1><p>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。<br>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。<br>GET         请求指定的页面信息，并返回实体主体。<br>HEAD        类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头<br>POST        向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。<br>PUT         从客户端向服务器传送的数据取代指定的文档的内容。<br>DELETE      请求服务器删除指定的页面。<br>CONNECT     HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。<br>OPTIONS     允许客户端查看服务器的性能。<br>TRACE       回显服务器收到的请求，主要用于测试或诊断。</p>
<h1 id="HTTP工作原理"><a href="#HTTP工作原理" class="headerlink" title="HTTP工作原理"></a>HTTP工作原理</h1><p><b>HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。HTTP协议采用了请求/响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。</b><br>以下是 HTTP 请求/响应的步骤：</p>
<ol>
<li>客户端连接到Web服务器<br>一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。例如，<a href="http://www.oakcms.cn。" target="_blank" rel="external">http://www.oakcms.cn。</a></li>
<li>发送HTTP请求<br>通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。</li>
<li>服务器接受请求并返回HTTP响应<br>Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。</li>
<li>释放连接TCP连接<br>若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;</li>
<li>客户端浏览器解析HTML内容<br>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。</li>
</ol>
<h1 id="GET和POST请求的区别"><a href="#GET和POST请求的区别" class="headerlink" title="GET和POST请求的区别"></a>GET和POST请求的区别</h1><ol>
<li>GET提交，请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，多个参数用&amp;连接；例 如：login.action?name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0 %E5%A5%BD。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如： %E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。<br>POST提交：把提交的数据放置在是HTTP包的包体中。上文示例中红色字体标明的就是实际的传输数据.因此，GET提交的数据会在地址栏中显示出来，而POST提交，地址栏不会改变</li>
<li>传输数据的大小：首先声明：HTTP协议没有对传输的数据大小进行限制，HTTP协议规范也没有对URL长度进行限制。而在实际开发中存在的限制主要有：<br>GET:特定浏览器和服务器对URL长度有限制，例如 IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系 统的支持。因此对于GET提交时，传输数据就会受到URL长度的 限制。<br>POST:由于不是通过URL传值，理论上数据不受 限。但实际各个WEB服务器会规定对post提交数据大小进行限制，Apache、IIS6都有各自的配置。</li>
<li>安全性<br>POST的安全性要比GET的安全性高。比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为(1)登录页面有可能被浏览器缓存；(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击<br><b>我们看看GET和POST的区别</b><br>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx?name=test1&amp;id=123456. POST方法是把提交的数据放在HTTP包的Body中.<br>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制.<br>GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。<br>GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;b&gt;HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网服务器传输超文本到本地浏览器的传送协议&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js技巧记录</title>
    <link href="http://yoursite.com/2017/12/11/js%E6%8A%80%E5%B7%A7%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2017/12/11/js技巧记录/</id>
    <published>2017-12-11T02:10:22.000Z</published>
    <updated>2017-12-18T02:45:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><b>在工作过程中遇见的一些常用的JavaScript技巧记录</b><br><a id="more"></a></p>
<h1 id="1、jQuery给动态添加的元素绑定事件"><a href="#1、jQuery给动态添加的元素绑定事件" class="headerlink" title="1、jQuery给动态添加的元素绑定事件"></a>1、jQuery给动态添加的元素绑定事件</h1><p>jquery 1.7版以后使用on动态绑定事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#testdiv ul"</span>).on(<span class="string">"click"</span>,<span class="string">"li"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="comment">//do something here</span></div><div class="line"> &#125;);</div></pre></td></tr></table></figure></p>
<h1 id="2、JQuery中html、append、after、before、empty、remove"><a href="#2、JQuery中html、append、after、before、empty、remove" class="headerlink" title="2、JQuery中html、append、after、before、empty、remove"></a>2、JQuery中html、append、after、before、empty、remove</h1><ul>
<li>xx.html(content):给元素添加html代码或者清空html代码(xx.html());<br>作用原理首先是移除目标元素内部的html代码，然后将新代码添加到目标元素.</li>
<li>xx.append(content):append的内容添加到了选中内容的内部，并且对其原有的内容不影响;<br>作用原理是在被选元素的结尾（仍然在内部）插入指定内容.</li>
<li>$(content).appendTo(xx):appendTo()和append效果相同，只是写法不同.</li>
<li>xx.after(content):将html代码插入到指定元素的后面，如果后面有元素，则将元素后移，再插入html代码.<br><b>*insertAfter()和after()使用的方法和效果相同,只是写法不同</b></li>
<li>before()方法将html代码插入到指定元素前面，如果前面有元素，则将元素前移，再插入html代码。<br><b>insertBefore()和before()使用的方法和效果也相同.</b></li>
<li>xx.empty():被选中的元素中的html内容都被清除，但元素本身还存在.</li>
<li>xx.remove():被选中的整个元素包括其内部的子元素都被移除了(remove方法将目标元素整个的从DOM中移除).</li>
</ul>
<h1 id="3、获取html5的data-属性"><a href="#3、获取html5的data-属性" class="headerlink" title="3、获取html5的data-*属性"></a>3、获取html5的data-*属性</h1><ul>
<li><p>通过dataset属性访问</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> appId = $(<span class="string">"#myDiv"</span>).dataset.appid;<span class="comment">//获取data-appid的值</span></div></pre></td></tr></table></figure>
</li>
<li><p>传统获取方式:getAttribute</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> appId = div.getAttribute(<span class="string">"data-appid"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>jQuery获取方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> appid = $(<span class="string">"#myDiv"</span>).data(<span class="string">"appid"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="jQuery-toggleClass"><a href="#jQuery-toggleClass" class="headerlink" title="jQuery-toggleClass()"></a>jQuery-toggleClass()</h1><p>该方法检查每个元素中指定的类。如果不存在则添加类，如果已设置则删除之。这就是所谓的切换效果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'.policy-item'</span>).toggleClass(<span class="string">'active'</span>);</div></pre></td></tr></table></figure></p>
<h1 id="简洁的JS解决tab跳转"><a href="#简洁的JS解决tab跳转" class="headerlink" title="简洁的JS解决tab跳转"></a>简洁的JS解决tab跳转</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 共用tab切换 */</span></div><div class="line">    $(<span class="string">'.tabtitle .tabitem'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> index = $(<span class="keyword">this</span>).index();</div><div class="line">        $(<span class="keyword">this</span>).addClass(<span class="string">"active"</span>).siblings(<span class="string">'.tabitem'</span>).removeClass(<span class="string">"active"</span>);</div><div class="line">        $(<span class="keyword">this</span>).parent().parent().find(<span class="string">'.tab-item'</span>).eq(index).show().siblings(<span class="string">'.tab-item'</span>).hide();</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h1 id="判断dom是否有class的值"><a href="#判断dom是否有class的值" class="headerlink" title="判断dom是否有class的值"></a>判断dom是否有class的值</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"html"</span>).hasClass(<span class="string">"no-js"</span>);</div></pre></td></tr></table></figure>
<h1 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Array.from() 方法从一个类似数组或可迭代对象中创建一个新的数组实例</span></div><div class="line"><span class="keyword">var</span> set1 = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">33</span>,<span class="string">'33'</span>,<span class="number">44</span>,<span class="string">'44'</span>]));</div><div class="line"><span class="comment">//等价于</span></div><div class="line"><span class="keyword">var</span> set1 = [...new <span class="built_in">Set</span>(arr)];</div><div class="line"><span class="comment">//(Spread)在函数调用中，...将数组装换成逗号分隔的序列，[]使其成为数组</span></div></pre></td></tr></table></figure>
<h1 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h1><ol>
<li>深拷贝和浅拷贝只针对像Object, Array这样的引用类型数据；</li>
<li>浅拷贝是对对象引用地址进行拷贝，并没有开辟新的栈，也就是拷贝后的结果是两个对象指向同一个引用地址，修改其中一个对象的属性，则另一个对象的属性也会改变；</li>
<li>深拷贝则是开启一个新的栈，两个对象对应两个不同的引用地址，修改一个对象的属性，不会改变另一个对象的属性；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//深拷贝,对象转成字符串，再把字符串转成对象</span></div><div class="line"><span class="keyword">var</span> newArr2=<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(arr));</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="push-apply合并数组"><a href="#push-apply合并数组" class="headerlink" title="push.apply合并数组"></a>push.apply合并数组</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],arr2=[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</div><div class="line">arr1.push.apply(arr1,arr2);<span class="comment">/* 数组长度有限制,一般不超过10万 */</span></div><div class="line"><span class="built_in">console</span>.log(arr1)<span class="comment">//[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></div></pre></td></tr></table></figure>
<h1 id="缓存变量"><a href="#缓存变量" class="headerlink" title="缓存变量"></a>缓存变量</h1><ul>
<li><p>for循环缓存length</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</div><div class="line">&#125;<span class="comment">/* 每一次循环的时候，都要查询一次arr.length */</span></div><div class="line"><span class="comment">//------------------------分割线</span></div><div class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=arr.length;i&lt;len;i++)&#123;</div><div class="line">&#125;<span class="comment">/* 缓存了arr.length */</span></div></pre></td></tr></table></figure>
</li>
<li><p>元素事件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'.div1'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;);<span class="comment">/* 点击一次就要查询一次.div1 */</span></div><div class="line"><span class="comment">//--------------------------分割线   </span></div><div class="line"><span class="keyword">var</span> $div1=$(<span class="string">'.div1'</span>);<span class="comment">/* 缓存了$('.div1') */</span></div><div class="line">$div1.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="将参数转成数组"><a href="#将参数转成数组" class="headerlink" title="将参数转成数组"></a>将参数转成数组</h1><p>函数里的arguments，虽然拥有length属性，但是arguments不是一个数组，是一个类数组，没有push,slice等方法。有些时候，需要把arguments转成数组:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> _argument=<span class="built_in">Array</span>.prototype.slice.apply(<span class="built_in">arguments</span>);</div></pre></td></tr></table></figure></p>
<h1 id="如何避免“回调地狱”"><a href="#如何避免“回调地狱”" class="headerlink" title="如何避免“回调地狱”"></a>如何避免“回调地狱”</h1><p>一堆以})结尾的金字塔，我们称它为“回调地狱”。</p>
<ul>
<li><p>减少代码嵌套(给函数命名)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'form'</span>).onsubmit = formSubmit</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">formSubmit</span> (<span class="params">submitEvent</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>).value</div><div class="line">  request(&#123;</div><div class="line">    <span class="attr">uri</span>: <span class="string">"http://example.com/upload"</span>,</div><div class="line">    <span class="attr">body</span>: name,</div><div class="line">    <span class="attr">method</span>: <span class="string">"POST"</span></div><div class="line">  &#125;, postResponse)</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 给函数命名 */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">postResponse</span> (<span class="params">err, response, body</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> statusMessage = <span class="built_in">document</span>.querySelector(<span class="string">'.status'</span>)</div><div class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> statusMessage.value = err</div><div class="line">  statusMessage.value = body</div><div class="line">&#125;<span class="comment">/* ！函数声明在底部，却仍然能调用，这得益于函数提升。 */</span></div></pre></td></tr></table></figure>
</li>
<li><p>模块化(module.exports)<br>module.exports来自node.js的模块系统，可以使用在node、Electron，浏览器上（在部署时需要使用Browserify工具打包）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//formuploader.js</span></div><div class="line"><span class="built_in">module</span>.exports.submit = formSubmit;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">formSubmit</span> (<span class="params">submitEvent</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>).value;</div><div class="line">  request(&#123;</div><div class="line">    <span class="attr">uri</span>: <span class="string">"http://example.com/upload"</span>,</div><div class="line">    <span class="attr">body</span>: name,</div><div class="line">    <span class="attr">method</span>: <span class="string">"POST"</span></div><div class="line">  &#125;, postResponse)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">postResponse</span> (<span class="params">err, response, body</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> statusMessage = <span class="built_in">document</span>.querySelector(<span class="string">'.status'</span>);</div><div class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> statusMessage.value = err;</div><div class="line">  statusMessage.value = body</div><div class="line">&#125;</div><div class="line"><span class="comment">//formuploader.js</span></div><div class="line"><span class="keyword">var</span> formUploader = <span class="built_in">require</span>(<span class="string">'formuploader'</span>);</div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'form'</span>).onsubmit = formUploader.submit</div></pre></td></tr></table></figure>
</li>
<li><p>处理每一个错误<br>常见错误有几种:语法错误（运行失败）、运行时错误（可以运行但是有bug）、平台错误（文件权限问题、磁盘问题、网络问题）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//最常用的回调错误处理是Node.js风格，也就是回调函数的第一个参数总是错误参数</span></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">handleFile</span> (<span class="params">error, file</span>) </span>&#123;</div><div class="line">   <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="built_in">console</span>.error(<span class="string">'Uhoh, there was an error'</span>, error)</div><div class="line">   <span class="comment">// otherwise, continue on and use `file` in your code</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><b>总结:</b><br>1、不要嵌套函数，命名后调用更好；<br>2、使用函数提升；<br>3、处理回调函数的每一个错误；<br>4、创建可重用函数，写成模块，让你更容易读懂代码。</p>
<h1 id="Browserify简单使用"><a href="#Browserify简单使用" class="headerlink" title="Browserify简单使用"></a>Browserify简单使用</h1><p>安装:</p>
<blockquote>
<p>npm install -g browserify</p>
</blockquote>
<p>使用:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//module.js：</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="string">'It works from module.js.'</span>;</div><div class="line"><span class="comment">//module2.js：</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="string">'It works from module2.js.'</span>;</div><div class="line"><span class="comment">//entry.js：</span></div><div class="line"><span class="keyword">var</span> m = <span class="built_in">require</span>(<span class="string">'./module.js'</span>);</div><div class="line"><span class="keyword">var</span> m2 = <span class="built_in">require</span>(<span class="string">'./module2.js'</span>);</div><div class="line"><span class="built_in">console</span>.log(m, m2);</div></pre></td></tr></table></figure></p>
<p>使用browserify编译:</p>
<blockquote>
<p>browserify entry.js &gt; bundle.js</p>
</blockquote>
<p>编译好的 js可以直接拿到浏览器使用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;b&gt;在工作过程中遇见的一些常用的JavaScript技巧记录&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>flex布局详解</title>
    <link href="http://yoursite.com/2017/12/07/flex%E5%B8%83%E5%B1%80%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/12/07/flex布局详解/</id>
    <published>2017-12-07T09:30:40.000Z</published>
    <updated>2017-12-27T02:15:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><b>Flex是Flexible Box的缩写，意为”弹性盒子布局”。flex 的核心的概念就是 容器 和 轴。容器包括外层的 父容器 和内层的 子容器，轴包括 主轴 和 交叉轴</b><br><a id="more"></a></p>
<h1 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h1><p>采用Flex布局的元素，称为Flex容器（flex container）；它的所有子元素自动成为容器成员，称为Flex项目（flex item）。<br><img src="/2017/12/07/flex布局详解/flex-detail.png" alt="flex"><br>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。<br>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p>
<h1 id="2、容器的属性"><a href="#2、容器的属性" class="headerlink" title="2、容器的属性"></a>2、容器的属性</h1><ul>
<li>flex-direction（决定主轴的方向，即项目的排列方向）<br><img src="/2017/12/07/flex布局详解/1.png" alt="1"><br><img src="/2017/12/07/flex布局详解/2.png" alt="2"></li>
<li>flex-wrap(定义，如果一条轴线排不下，如何换行)<br>（1）nowrap（默认）：不换行；<br>（2）wrap：换行，第一行在上方；<br>（3）wrap-reverse：换行，第一行在下方。</li>
<li>flex-flow<br>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</li>
<li>justify-content(定义项目在主轴上的对齐方式)<br><img src="/2017/12/07/flex布局详解/3.png" alt="3"></li>
<li>align-items(定义项目在交叉轴上如何对齐)<br><img src="/2017/12/07/flex布局详解/4.png" alt="4"></li>
<li>align-content(定义多根轴线时的对齐方式)<br><img src="/2017/12/07/flex布局详解/5.png" alt="5"></li>
</ul>
<h1 id="3、项目的属性"><a href="#3、项目的属性" class="headerlink" title="3、项目的属性"></a>3、项目的属性</h1><ul>
<li>order(定义项目的排列顺序,数值越小，排列越靠前，默认为0)</li>
<li>flex-grow(定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大)<br>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</li>
<li>flex-shrink(定义项目的缩小比例，默认为1，即如果空间不足，该项目将缩小)<br>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。<br>负值对该属性无效。</li>
<li>flex-basis(定义在分配多余空间之前，项目占据的主轴空间)</li>
<li>flex(是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto,后两个属性可选)</li>
<li>align-self(允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。)<h1 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h1><img src="/2017/12/07/flex布局详解/flex.png" alt="flex"></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;b&gt;Flex是Flexible Box的缩写，意为”弹性盒子布局”。flex 的核心的概念就是 容器 和 轴。容器包括外层的 父容器 和内层的 子容器，轴包括 主轴 和 交叉轴&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack学习一</title>
    <link href="http://yoursite.com/2017/12/01/webpack%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <id>http://yoursite.com/2017/12/01/webpack学习一/</id>
    <published>2017-12-01T03:30:45.000Z</published>
    <updated>2017-12-01T06:01:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><b>webpack是一个现代JavaScript应用程序的模块打包器(module bundler)。当webpack处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个bundle。</b><br><a id="more"></a></p>
<h1 id="1、webpack的四个核心概念"><a href="#1、webpack的四个核心概念" class="headerlink" title="1、webpack的四个核心概念"></a>1、webpack的四个核心概念</h1><ul>
<li><p>入口(entry):<br>入口起点(entry point)指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./path/to/my/entry/file.js'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>出口(output)<br>output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件。你可以通过在配置中指定一个 output 字段，来配置这些处理过程：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./path/to/my/entry/file.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'dist'</span>),</div><div class="line">    <span class="attr">filename</span>: <span class="string">'my-first-webpack.bundle.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>loader<br>loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。本质上，webpack loader 将所有类型的文件，转换为应用程序的依赖图可以直接引用的模块。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./path/to/my/entry/file.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'dist'</span>),</div><div class="line">    <span class="attr">filename</span>: <span class="string">'my-first-webpack.bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">rules</span>: [</div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">'raw-loader'</span> &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = config;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>以上配置中，对一个单独的 module 对象定义了 rules 属性，里面包含两个必须属性：test 和 use。这告诉 webpack 编译器(compiler) 如下信息：</p>
<blockquote>
<p>“嘿，webpack 编译器，当你碰到「在 require()/import 语句中被解析为 ‘.txt’ 的路径」时，在你对它打包之前，先使用 raw-loader 转换一下。”</p>
<ul>
<li>插件(plugins)</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;b&gt;webpack是一个现代JavaScript应用程序的模块打包器(module bundler)。当webpack处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个bundle。&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sketch实用插件记录</title>
    <link href="http://yoursite.com/2017/11/30/sketch%E5%AE%9E%E7%94%A8%E6%8F%92%E4%BB%B6%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2017/11/30/sketch实用插件记录/</id>
    <published>2017-11-30T08:17:18.000Z</published>
    <updated>2017-12-01T01:49:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><b>工欲善其事必先利其器之sketch学习过程中好用插件集合–事半功倍</b><br><a id="more"></a></p>
<h1 id="1、Content-Generator"><a href="#1、Content-Generator" class="headerlink" title="1、Content Generator"></a>1、Content Generator</h1><p><b>用于生成人名、头像、邮件、占位文字、地理位置、随机数字等等</b><br>选中需要生成的text，plugins–&gt; Content Generator选择类型即可</p>
<h1 id="2、Icon-Fonts"><a href="#2、Icon-Fonts" class="headerlink" title="2、Icon Fonts"></a>2、Icon Fonts</h1><ol>
<li><p>安装 Font Bundles，执行 Plugins &gt; What is a Font Bundles? 在弹出的对话框中点击底部 GitHub 链接下载 Font Bundles，或<a href="https://pan.baidu.com/s/1jHAkfEA" target="_blank" rel="external">https://pan.baidu.com/s/1jHAkfEA</a></p>
</li>
<li><p>解压 Font Bundles，安装 ttf-files 里的 otf / ttf</p>
</li>
<li><p>执行 Plugins &gt; Install a Font-Bundle 选中 Font Bundles 文件夹，完成首次使用安装</p>
</li>
<li><p>执行 Plugins &gt; Grid Insert &gt; 选择对应的 Icon Font 弹出管理界面，点击相应图标插入到 Sketch 文档</p>
</li>
</ol>
<h1 id="3、Measure"><a href="#3、Measure" class="headerlink" title="3、Measure"></a>3、Measure</h1><p>标注工具</p>
<h1 id="4、Marketch"><a href="#4、Marketch" class="headerlink" title="4、Marketch"></a>4、Marketch</h1><p>整个网页一键标注工具</p>
<h1 id="5、-InVision-Craft"><a href="#5、-InVision-Craft" class="headerlink" title="5、 InVision Craft"></a>5、 InVision Craft</h1><p>简化设计流程中的自动化填充</p>
<h1 id="6、AnimateMate"><a href="#6、AnimateMate" class="headerlink" title="6、AnimateMate"></a>6、AnimateMate</h1><p>制作一些简单的动画</p>
<h1 id="7、地图生成器-Map-Generator"><a href="#7、地图生成器-Map-Generator" class="headerlink" title="7、地图生成器 - Map Generator"></a>7、地图生成器 - Map Generator</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;b&gt;工欲善其事必先利其器之sketch学习过程中好用插件集合–事半功倍&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Sass 入门二</title>
    <link href="http://yoursite.com/2017/11/27/Sass-%E5%85%A5%E9%97%A8%E4%BA%8C/"/>
    <id>http://yoursite.com/2017/11/27/Sass-入门二/</id>
    <published>2017-11-27T09:15:56.000Z</published>
    <updated>2017-12-01T02:53:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><b>阅读Sass官方文档记录二</b><br><a id="more"></a></p>
<h1 id="1、Sass特色"><a href="#1、Sass特色" class="headerlink" title="1、Sass特色"></a>1、Sass特色</h1><ol>
<li>完全兼容 CSS3</li>
<li>在 CSS 基础上增加变量、嵌套 (nesting)、混合 (mixins) 等功能</li>
<li>通过函数进行颜色值与属性值的运算</li>
<li>提供控制指令 (control directives)等高级功能</li>
<li>自定义输出格式</li>
</ol>
<h1 id="2、语法格式"><a href="#2、语法格式" class="headerlink" title="2、语法格式"></a>2、语法格式</h1><ol>
<li>SCSS：仅在 CSS3 语法的基础上进行拓展，所有 CSS3 语法在 SCSS 中都是通用的，同时加入 Sass 的特色功能</li>
<li>Sass：它使用 “缩进” 代替 “花括号” 表示属性属于某个选择器，用 “换行” 代替 “分号” 分隔属性<br>任何一种格式可以直接 导入 (@import) 到另一种格式中使用，或者通过 sass-convert 命令行工具转换成另一种格式<blockquote>
<p>Convert Sass to SCSS<br>Convert SCSS to Sass</p>
</blockquote>
</li>
</ol>
<h1 id="3、CSS-功能拓展"><a href="#3、CSS-功能拓展" class="headerlink" title="3、CSS 功能拓展"></a>3、CSS 功能拓展</h1><ol>
<li><p>父选择器 &amp;<br>在嵌套 CSS 规则时，有时也需要直接使用嵌套外层的父选择器，例如，当给某个元素设定 hover 样式时，或者当 body 元素有某个 classname 时，可以用 &amp; 代表嵌套规则外层的父选择器。<br>&amp; 必须作为选择器的第一个字符，其后可以跟随后缀生成复合的选择器</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#main</span> &#123;</div><div class="line">  <span class="attribute">color</span>: black;</div><div class="line">  &amp;-sidebar &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid; &#125;</div><div class="line">&#125;<span class="comment">/*编译后*/</span></div><div class="line"><span class="selector-id">#main</span> &#123;</div><div class="line">  <span class="attribute">color</span>: black; &#125;</div><div class="line"><span class="selector-id">#main-sidebar</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid; &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>属性嵌套<br>有些 CSS 属性遵循相同的命名空间 (namespace)，比如 font-family, font-size, font-weight 都以 font 作为属性的命名空间。为了便于管理这样的属性，同时也为了避免了重复输入，Sass 允许将属性嵌套在命名空间中</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.funky</span> &#123;</div><div class="line">  <span class="attribute">font</span>: <span class="number">20px</span>/<span class="number">24px</span> &#123;</div><div class="line">    family: fantasy;</div><div class="line">    weight: bold;</div><div class="line">  &#125;</div><div class="line">&#125;<span class="comment">/*编译后*/</span></div><div class="line"><span class="selector-class">.funky</span> &#123;</div><div class="line">  <span class="attribute">font</span>: <span class="number">20px</span>/<span class="number">24px</span>;</div><div class="line">    <span class="attribute">font-family</span>: fantasy;</div><div class="line">    <span class="attribute">font-weight</span>: bold; &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>占位符选择器 %foo<br>占位符选择器(Placeholder Selector)是以%而不是.作为开始符的选择器. 它自身不会出现在编译后的CSS文件中, 只会出现在@extend了它的那些选择器中.<br><b>当我们不可能用到icon这个类时使用,CSS中不会出现.icon类!</b></p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">%<span class="attribute">icon</span> &#123;</div><div class="line">  <span class="attribute">transition</span>: background-color ease .<span class="number">2s</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> .<span class="number">5em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.error-icon</span> &#123;</div><div class="line">  @<span class="keyword">extend</span> %icon;</div><div class="line">  <span class="comment">/* error specific styles... */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.info-icon</span> &#123;</div><div class="line">  @<span class="keyword">extend</span> %icon;</div><div class="line">  <span class="comment">/* info specific styles... */</span></div><div class="line">&#125;<span class="comment">/*编译后 */</span></div><div class="line"><span class="selector-class">.error-icon</span>, <span class="selector-class">.info-icon</span> &#123;</div><div class="line">  <span class="attribute">transition</span>: background-color ease .<span class="number">2s</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> .<span class="number">5em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.error-icon</span> &#123;</div><div class="line">  <span class="comment">/* error specific styles... */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.info-icon</span> &#123;</div><div class="line">  <span class="comment">/* info specific styles... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>注释 /<em> </em>/ 与 //<br>Sass 支持标准的 CSS 多行注释 /<em> </em>/，以及单行注释 //，前者会 被完整输出到编译后的 CSS 文件中，而后者则不会<br>将 ! 作为多行注释的第一个字符表示在压缩输出模式下保留这条注释并输出到 CSS 文件中，通常用于添加版权信息<br>插值语句 (interpolation) 也可写进多行注释中输出变量值：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$version</span>: <span class="string">"1.2.3"</span>;</div><div class="line"><span class="comment">/* This CSS is generated by My Snazzy Framework version #&#123;$version&#125;. */</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="4、SassScript"><a href="#4、SassScript" class="headerlink" title="4、SassScript"></a>4、SassScript</h1><ol>
<li><p>变量 $<br>变量支持块级作用域，嵌套规则内定义的变量只能在嵌套规则内使用（局部变量），不在嵌套规则内定义的变量则可在任何地方使用（全局变量）<br>将局部变量转换为全局变量可以添加 <b>!global</b>声明</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$width</span>: <span class="number">5em</span>;</div><div class="line"><span class="selector-id">#main</span> &#123;</div><div class="line">  <span class="variable">$width</span>: <span class="number">5em</span> !global;</div><div class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#main</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>数据类型</p>
<ol>
<li>数字，1, 2, 13, 10px</li>
<li>字符串，有引号字符串与无引号字符串，”foo”, ‘bar’, baz,sans-serif,bold</li>
<li>颜色，blue, #04a3f9, rgba(255,0,0,0.5)</li>
<li>布尔型，true, false</li>
<li>空值，null</li>
<li>数组 (list)，用空格或逗号作分隔符，1.5em 1em 0 2em, Helvetica, Arial, sans-serif( Sass 如何处理 CSS 中 margin: 10px 15px 0 0 或者 font-face: Helvetica, Arial, sans-serif 这样通过空格或者逗号分隔的一系列的值);<br>Sass list functions 赋予了数组更多新功能：nth 函数可以直接访问数组中的某一项；join 函数可以将多个数组连接在一起；append 函数可以在数组中添加新值；而 @each 指令能够遍历数组中的每一项</li>
<li>maps, 相当于 JavaScript 的 object，(key1: value1, key2: value2)</li>
</ol>
</li>
<li>运算<br>所有数据类型均支持相等运算 == 或 !=<ol>
<li>数字运算<br>SassScript 支持数字的加减乘除、取整等运算 (+, -, *, /, %)，如果必要会在不同单位间转换值；关系运算 &lt;, &gt;, &lt;=, &gt;= 也可用于数字运算<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">1in</span> + <span class="number">8pt</span>;</div><div class="line">&#125;<span class="comment">/*b编译后*/</span></div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">1.111in</span>; &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<p>（1）、/ 在 CSS 中通常起到分隔数字的用途，SassScript 作为 CSS 语言的拓展当然也支持这个功能，同时也赋予了 / 除法运算的功能<br>以下三种情况 / 将被视为除法运算符号：如果值，或值的一部分，是变量或者函数的返回值；如果值被圆括号包裹；如果值是算数表达式的一部分<br>如果需要使用变量，同时又要确保 / 不做除法运算而是完整地编译到 CSS 文件中，只需要用 #{} 插值语句将变量包裹:<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="variable">$font-size</span>: <span class="number">12px</span>;</div><div class="line">  <span class="variable">$line-height</span>: <span class="number">30px</span>;</div><div class="line">  <span class="attribute">font</span>: #&#123;<span class="variable">$font-size</span>&#125;/#&#123;<span class="variable">$line-height</span>&#125;;</div><div class="line">&#125;<span class="comment">/*编译后*/</span></div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">30px</span>; &#125;</div></pre></td></tr></table></figure></p>
<p>（2）、颜色值运算<br>颜色值的运算是分段计算进行的，也就是分别计算红色，绿色，以及蓝色的值：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#010203</span> + <span class="number">#040506</span>;</div><div class="line">&#125;<span class="comment">/*01 + 04 = 05 02 + 05 = 07 03 + 06 = 09*/</span></div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#050709</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>（3）、字符串运算 </p>
<ul>
<li>可用于连接字符串<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">cursor</span>: e + -resize;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">cursor</span>: e-resize; &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>(4)、布尔运算<br>SassScript 支持布尔型的 and or 以及 not 运算<br>(5)、插值语句 #{}<br>通过 #{} 插值语句可以在选择器或属性名中使用变量：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>: foo;</div><div class="line"><span class="variable">$attr</span>: border;</div><div class="line"><span class="selector-tag">p</span>.#&#123;<span class="variable">$name</span>&#125; &#123;</div><div class="line">  #&#123;<span class="variable">$attr</span>&#125;-<span class="attribute">color</span>: blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="4、-Rules-与指令"><a href="#4、-Rules-与指令" class="headerlink" title="4、@-Rules 与指令"></a>4、@-Rules 与指令</h1><ol>
<li>@import<br>通常，@import 寻找 Sass 文件并将其导入，但在以下情况下，@import 仅作为普通的 CSS 语句，不会导入任何 Sass 文件。</li>
</ol>
<ul>
<li>文件拓展名是 .css；</li>
<li>文件名以 http:// 开头；</li>
<li>文件名是 url()；</li>
<li><p>@import 包含 media queries。<br>如果不在上述情况内，文件的拓展名是 .scss 或 .sass，则导入成功。没有指定拓展名，Sass 将会试着寻找文件名相同，拓展名为 .scss 或 .sass 的文件并将其导入。</p>
<ol>
<li><p>分音<br>如果需要导入 SCSS 或者 Sass 文件，但又不希望将其编译为 CSS，只需要在文件名前添加下划线，这样会告诉 Sass 不要编译这些文件，但导入语句中却不需要添加下划线：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将文件命名为 _colors.scss</span></div><div class="line">@<span class="keyword">import</span> <span class="string">"colors"</span>;<span class="comment">//导入的其实是 _colors.scss 文件</span></div></pre></td></tr></table></figure>
</li>
<li><p>@media<br>Sass 中 @media 指令与 CSS 中用法一样，只是增加了一点额外的功能：允许其在 CSS 规则中嵌套。如果 @media 嵌套在 CSS 规则内，编译时，@media 将被编译到文件的最外层，包含嵌套的父选择器。</p>
</li>
</ol>
</li>
</ul>
<h1 id="5、-extend"><a href="#5、-extend" class="headerlink" title="5、@extend"></a>5、@extend</h1><p>将.error 下的所有样式继承给 .seriousError，border-width: 3px; 是单独给 .seriousError 设定特殊样式，这样，使用 .seriousError 的地方可以不再使用 .error</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;b&gt;阅读Sass官方文档记录二&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Sass 入门一</title>
    <link href="http://yoursite.com/2017/11/24/Sass-%E5%85%A5%E9%97%A8%E4%B8%80/"/>
    <id>http://yoursite.com/2017/11/24/Sass-入门一/</id>
    <published>2017-11-24T07:10:44.000Z</published>
    <updated>2017-12-01T01:51:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><b>第一次接触Sass，阅读官方文档时的简单记录</b><br><a id="more"></a></p>
<h1 id="1、-安装-mac"><a href="#1、-安装-mac" class="headerlink" title="1、 安装(mac)"></a>1、 安装(mac)</h1><ol>
<li><p>Ruby安装<br>Linux和Mac已自带Ruby，不用再安装</p>
<blockquote>
<p>ruby -v //验证ruby安装成功</p>
</blockquote>
</li>
<li><p>Sass安装</p>
<blockquote>
<p>sudo gem install sass<br>sass -v //验证Sass安装成功</p>
</blockquote>
</li>
<li><p>Sass编译</p>
<blockquote>
<p>sass input.scss output.css //单文件转换命令<br>sass –watch input.scss:output.css //单文件监听命令<br>sass –watch app/sass:public/stylesheets //如果你有很多的sass文件的目录，你也可以告诉sass监听整个目录：</p>
</blockquote>
</li>
<li><p>webstorm下设置sass自动编译<br><a href="https://www.cnblogs.com/cshi/p/5622650.html" target="_blank" rel="external">webstorm下设置sass</a><br><b>注意：在webstorm下文件后缀为.scss</b></p>
</li>
</ol>
<h1 id="2、Sass的变量"><a href="#2、Sass的变量" class="headerlink" title="2、Sass的变量"></a>2、Sass的变量</h1><p>sass让人们受益的一个重要特性就是它为css引入了变量</p>
<ol>
<li><p>变量声明<br>如果变量定义在了规则块外边，那么在这个样式表中都可以像 nav规则块那样引用它；<br>如果变量定义在了nav的{ }规则块内，那么它只能在nav规则块内使用。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$nav-color</span>: <span class="number">#F90</span>;</div><div class="line"><span class="selector-tag">nav</span> &#123;</div><div class="line">  <span class="variable">$width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="variable">$nav-color</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">nav</span> &#123;<span class="comment">//编译后</span></div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#F90</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>变量引用<br>凡是css属性的标准值可存在的地方，变量就可以使用。css生成时，变量会被它们的值所替代。之后，如果你需要一个不同的值，只需要改变这个变量的值，则所有引用此变量的地方生成的值都会随之改变</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$highlight-color</span>: <span class="number">#F90</span>;</div><div class="line"><span class="variable">$highlight-border</span>: <span class="number">1px</span> solid <span class="variable">$highlight-color</span>;</div><div class="line"><span class="selector-class">.selected</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="variable">$highlight-border</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.selected</span> &#123;<span class="comment">//编译后</span></div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#F90</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>变量名用中划线还是下划线分隔<br><b>Sass兼容两种方式</b></p>
</li>
</ol>
<h1 id="3、Sass嵌套"><a href="#3、Sass嵌套" class="headerlink" title="3、Sass嵌套"></a>3、Sass嵌套</h1><p><b>css中重复写选择器是非常恼人的,sass在输出css时会把这些嵌套规则处理好，避免重复书写</b><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#content</span> &#123;</div><div class="line">  <span class="selector-tag">article</span> &#123;</div><div class="line">    <span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: <span class="number">#333</span> &#125;</div><div class="line">    p &#123; margin-bottom: <span class="number">1.4em</span> &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="number">#c</span>ontent aside &#123; background-color: <span class="number">#EEE</span> &#125;</div><div class="line">&#125;</div><div class="line"> /* 编译后 */</div><div class="line"><span class="number">#c</span>ontent article h1 &#123; color: <span class="number">#333</span> &#125;</div><div class="line"><span class="number">#c</span>ontent article p &#123; margin-bottom: <span class="number">1.4em</span> &#125;</div><div class="line"><span class="number">#c</span>ontent aside &#123; background-color: <span class="number">#EEE</span> &#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>父选择器的标识符&amp;<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">article</span> <span class="selector-tag">a</span> &#123;</div><div class="line">  <span class="attribute">color</span>: blue;</div><div class="line">  &amp;:hover &#123; <span class="attribute">color</span>: red &#125;</div><div class="line">&#125;/*编译后*/</div><div class="line">article a &#123; color: blue &#125;</div><div class="line">article a:hover &#123; color: red &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>群组选择器的嵌套</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span> &#123;<span class="attribute">margin-bottom</span>: .<span class="number">8em</span>&#125;</div><div class="line">&#125;/*编译后*/</div><div class="line">.container h1, .container h2, .container h3 &#123; margin-bottom: .<span class="number">8em</span> &#125;</div><div class="line">nav, aside &#123;</div><div class="line">  a &#123;color: blue&#125;</div><div class="line">&#125;/*编译后*/</div><div class="line">nav a, aside a &#123;color: blue&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>子组合选择器和同层组合选择器：&gt;、+和~<br>子组合选择器&gt;:选择一个元素的<b>直接</b>子元素<br>同层相邻组合选择器+:选择<b>紧接<b>在另一个元素后的元素，而且二者有相同的父元素<br>同层全体组合选择器~:选择<b>所有</b>跟在一个元素后的同层元素,不管它们之间隔了多少其他元素</b></b></p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">article</span> &gt; <span class="selector-tag">section</span> &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span> &#125; //只会选择article下紧跟着的子元素中命中section选择器的元素</div><div class="line">header + p &#123; font-size: <span class="number">1.1em</span> &#125; //选择header元素后紧跟的p元素</div><div class="line">article ~ article &#123; border-top: <span class="number">1px</span> dashed <span class="number">#ccc</span> &#125; //选择所有跟在article后的同层article元素</div></pre></td></tr></table></figure>
</li>
<li><p>嵌套属性</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">nav</span> &#123;</div><div class="line">  <span class="attribute">border</span>: &#123;</div><div class="line">  style: solid;</div><div class="line">  <span class="attribute">width</span>: <span class="number">1px</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#ccc</span>;</div><div class="line">  &#125;</div><div class="line">&#125;<span class="comment">/*编译后*/</span></div><div class="line"><span class="selector-tag">nav</span> &#123;</div><div class="line">  <span class="attribute">border-style</span>: solid;</div><div class="line">  <span class="attribute">border-width</span>: <span class="number">1px</span>;</div><div class="line">  <span class="attribute">border-color</span>: <span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">nav</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span> &#123;</div><div class="line">  left: <span class="number">0px</span>;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="3、导入SASS文件"><a href="#3、导入SASS文件" class="headerlink" title="3、导入SASS文件"></a>3、导入SASS文件</h1><p>sass的@import规则在生成css文件时把相关文件导入进来,当你@import一个局部文件时，还可以不写文件的全名，即省略文件名开头的下划线h和后缀。</p>
<ol>
<li>使用SASS部分文件<br>sass局部文件的文件名以下划线开头。这样，sass就不会在编译时单独编译这个文件输出css，而只把这个文件用作导入</li>
<li>默认变量值<br>一般情况下，你反复声明一个变量，只有最后一处声明有效且它会覆盖前边的值;<br>!default:如果这个变量被声明赋值了，那就用它声明的值，否则就用这个默认值</li>
<li>嵌套导入<br>sass允许@import命令写在css规则内<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">aside</span> &#123;</div><div class="line"><span class="attribute">background</span>: blue;</div><div class="line"><span class="attribute">color</span>: white;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.blue-theme</span> &#123;@<span class="keyword">import</span> <span class="string">"blue-theme"</span>&#125;/*得到如下：*/</div><div class="line">.blue-theme &#123;</div><div class="line"><span class="selector-tag">aside</span> &#123;</div><div class="line"> <span class="attribute">background</span>: blue;</div><div class="line"> <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>被导入的局部文件中定义的所有变量和混合器，也会在这个规则范围内生效。这些变量和混合器不会全局有效，这样我们就可以通过嵌套导入只对站点中某一特定区域运用某种颜色主题或其他通过变量配置的样式。</p>
<ol>
<li>原生的CSS导入<br>由于sass兼容原生的css，所以它也支持原生的CSS@import。可以把原始的css文件改名为.scss后缀，即可直接导入<h1 id="4、静默注释"><a href="#4、静默注释" class="headerlink" title="4、静默注释"></a>4、静默注释</h1><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#333</span>; <span class="comment">// 这种注释内容不会出现在生成的css文件中</span></div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>; <span class="comment">/* 这种注释内容会出现在生成的css文件中 */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">color</span> <span class="comment">/* 这块注释内容不会出现在生成的css中 */</span>: <span class="number">#333</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">1</span>; <span class="comment">/* 这块注释内容也不会出现在生成的css中 */</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="5、混合器"><a href="#5、混合器" class="headerlink" title="5、混合器"></a>5、混合器</h1><p>混合器使用@mixin标识符定义，这个标识符给一大段样式赋予一个名字，然后就可以在你的样式表中通过@include来使用这个混合器。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> rounded-corners &#123;</div><div class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line">notice &#123;</div><div class="line">  <span class="attribute">background-color</span>: green;</div><div class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00aa00</span>;</div><div class="line">  @<span class="keyword">include</span> rounded-corners;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>何时使用混合器<br>在不停地重复一段样式，那就应该把这段样式构造成优良的混合器</li>
<li>混合器中的CSS规则<br>混合器中不仅可以包含属性，也可以包含css规则，包含选择器和选择器中的属性</li>
<li><p>给混合器传参</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> link-colors(<span class="variable">$normal</span>, <span class="variable">$hover</span>, <span class="variable">$visited</span>) &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="variable">$normal</span>;</div><div class="line">  &amp;:hover &#123; <span class="attribute">color</span>: <span class="variable">$hover</span>; &#125;</div><div class="line">  &amp;:visited &#123; <span class="attribute">color</span>: <span class="variable">$visited</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">a</span> &#123;</div><div class="line">  @<span class="keyword">include</span> link-colors(blue, red, green);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Sass最终生成的是：</span></div><div class="line"></div><div class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">color</span>: blue; &#125;</div><div class="line"><span class="selector-tag">a</span>:hover &#123; <span class="attribute">color</span>: red; &#125;</div><div class="line"><span class="selector-tag">a</span>:visited &#123; <span class="attribute">color</span>: green; &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>默认参数值<br>为了在@include混合器时不必传入所有的参数，我们可以给参数指定一个默认值。参数默认值使用$name: default-value的声明形式，默认值可以是任何有效的css属性值，甚至是其他参数的引用</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> link-colors(</div><div class="line">    <span class="variable">$normal</span>,</div><div class="line">    <span class="variable">$hover</span>: <span class="variable">$normal</span>,</div><div class="line">    <span class="variable">$visited</span>: <span class="variable">$normal</span></div><div class="line">  )</div><div class="line">&#123;</div><div class="line">  <span class="attribute">color</span>: <span class="variable">$normal</span>;</div><div class="line">  &amp;:hover &#123; <span class="attribute">color</span>: <span class="variable">$hover</span>; &#125;</div><div class="line">  &amp;:visited &#123; <span class="attribute">color</span>: <span class="variable">$visited</span>; &#125;</div><div class="line">&#125;<span class="comment">//@include link-colors(red) $hover和$visited也会被自动赋值为red</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="6、使用选择器继承来精简CSS"><a href="#6、使用选择器继承来精简CSS" class="headerlink" title="6、使用选择器继承来精简CSS"></a>6、使用选择器继承来精简CSS</h1><p>选择器继承是说一个选择器可以继承为另一个选择器定义的所有样式。这个通过@extend语法实现<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//通过选择器继承继承样式</span></div><div class="line"><span class="selector-class">.error</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.error</span> <span class="selector-tag">a</span>&#123;  <span class="comment">//应用到.seriousError a</span></div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">  <span class="attribute">font-weight</span>: <span class="number">100</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h1</span><span class="selector-class">.error</span> &#123; <span class="comment">//应用到hl.seriousError</span></div><div class="line">  <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.seriousError</span> &#123;</div><div class="line">  @<span class="keyword">extend</span> .error;</div><div class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</div><div class="line">&#125;<span class="comment">//.seriousError不仅会继承.error自身的所有样式，任何跟.error有关的组合选择器样式也会被.seriousError以组合选择器的形式继承</span></div></pre></td></tr></table></figure></p>
<ol>
<li>跟混合器相比，继承生成的css代码相对更少。因为继承仅仅是<b>重复选择器</b>，而不会重复属性，所以使用继承往往比混合器生成的css体积更小。如果你非常关心你站点的速度，请牢记这一点。</li>
<li>继承遵从css层叠的规则。当两个不同的css规则应用到同一个html元素上时，并且这两个不同的css规则对同一属性的修饰存在不同的值，css层叠规则会决定应用哪个样式。相当直观：通常权重更高的选择器胜出，如果权重相同，定义在后边的规则胜出。<br><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为继承只会在生成css时复制选择器，而不会复制大段的css属性。但是如果你不小心，可能会让生成的css中包含大量的选择器复制<br>避免这种情况出现的最好方法就是不要在css规则中使用后代选择器（比如.foo .bar）去继承css规则</b></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;b&gt;第一次接触Sass，阅读官方文档时的简单记录&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sketch知识点合集</title>
    <link href="http://yoursite.com/2017/11/24/sketch%E7%9F%A5%E8%AF%86%E7%82%B9%E5%90%88%E9%9B%86/"/>
    <id>http://yoursite.com/2017/11/24/sketch知识点合集/</id>
    <published>2017-11-24T02:32:44.000Z</published>
    <updated>2017-12-01T01:53:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><b>使用sketch过程中一些小技巧的记录</b><br><a id="more"></a></p>
<h1 id="1、导出为-SVG"><a href="#1、导出为-SVG" class="headerlink" title="1、导出为.SVG"></a>1、导出为.SVG</h1><p>选中–&gt;右侧工具栏Export–&gt;format选择SVG–&gt;导出即可<br><img src="/2017/11/24/sketch知识点合集/export.svg" alt="export"></p>
<h1 id="2、快速复制排列"><a href="#2、快速复制排列" class="headerlink" title="2、快速复制排列"></a>2、快速复制排列</h1><ol>
<li>alt+所选图形：复制图形；</li>
<li>command+D:重复上一步操作；</li>
<li>菜单 Arrange -&gt; Make Grid（快速排列和复制画板）</li>
</ol>
<h1 id="3、蒙版"><a href="#3、蒙版" class="headerlink" title="3、蒙版"></a>3、蒙版</h1><ol>
<li>command+ G:将图形和图片放入新的组；</li>
<li>command+Ctrl+M：图形置于下层，设为蒙版；</li>
</ol>
<h1 id="4、符号-amp-共享式样"><a href="#4、符号-amp-共享式样" class="headerlink" title="4、符号 &amp; 共享式样"></a>4、符号 &amp; 共享式样</h1><p>符号是针对一个组（Group）的复用</p>
<ol>
<li>共享图层式样 Layer Style：图层式样则仅仅针对图形：使用什么样的填充和边框，什么样的阴影和模糊，这些都是可以复用并同步的。</li>
<li>共享文字式样 Text Style:文本式样让你保持文本的一致性，设定好字体、字号、颜色，然后复用于多个文本。<br><b>最后你可以在共享列表中来管理所有的符号和式样，方便你删除、复制或者重命名。</b></li>
</ol>
<h1 id="5、色彩模式-RGB-—-HSB"><a href="#5、色彩模式-RGB-—-HSB" class="headerlink" title="5、色彩模式 RGB — HSB"></a>5、色彩模式 RGB — HSB</h1><p>在色彩面板中，单击 RGB 值下方，就可以转换到 HSB 色彩模式。当你想要制作一个同色系的色板的时候，HSB 模式就会非常实用。</p>
<h1 id="6、快速查看图形间距离"><a href="#6、快速查看图形间距离" class="headerlink" title="6、快速查看图形间距离"></a>6、快速查看图形间距离</h1><ol>
<li>选中一个对象之后，按住alt 键， 将鼠标移至画布上，Sketch便会告诉你这个对象与画板各边框的距离。</li>
<li>选中一个对象之后，按住alt 键， 将鼠标移至另一对象，Sketch便会告诉你两个对象之间的距离。</li>
</ol>
<h1 id="6、图形缩放"><a href="#6、图形缩放" class="headerlink" title="6、图形缩放"></a>6、图形缩放</h1><p>缩放工具：<br><img src="/2017/11/24/sketch知识点合集/scale.png" alt="缩放"> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;b&gt;使用sketch过程中一些小技巧的记录&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>初涉angular</title>
    <link href="http://yoursite.com/2017/11/23/%E5%88%9D%E6%B6%89angular/"/>
    <id>http://yoursite.com/2017/11/23/初涉angular/</id>
    <published>2017-11-23T06:43:54.000Z</published>
    <updated>2017-12-01T01:54:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><b>AngularJS 是一个 JavaScript 框架。AngularJS 通过 指令 扩展了 HTML，且通过 表达式 绑定数据到 HTML。</b><br><a id="more"></a></p>
<h1 id="1-AngularJS-表达式"><a href="#1-AngularJS-表达式" class="headerlink" title="1 AngularJS 表达式"></a>1 AngularJS 表达式</h1><p><b>AngularJS 使用表达式把数据绑定到HTML</b></p>
<ol>
<li>AngularJS 表达式写在双大括号内：,与ng-bind指令有异曲同工之妙;</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;b&gt;AngularJS 是一个 JavaScript 框架。AngularJS 通过 指令 扩展了 HTML，且通过 表达式 绑定数据到 HTML。&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue实例和生命周期的理解</title>
    <link href="http://yoursite.com/2017/11/23/Vue-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/11/23/Vue-生命周期的理解/</id>
    <published>2017-11-23T02:17:12.000Z</published>
    <updated>2017-11-23T03:14:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如需要设置数据监听、编译模板、挂载实例到 DOM、在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，给予用户机会在一些特定的场景下添加他们自己的代码。</strong><br><a id="more"></a></p>
<h1 id="1、Vue实例详解"><a href="#1、Vue实例详解" class="headerlink" title="1、Vue实例详解"></a>1、Vue实例详解</h1><p>每个 Vue 应用都是通过 Vue 函数创建一个新的 Vue 实例开始的</p>
<h2 id="1-1-data对象"><a href="#1-1-data对象" class="headerlink" title="1.1 data对象"></a>1.1 data对象</h2><p>数据绑定离不开data里面的数据,也是Vue的核心属性.data对象是Vue绑定数据到HTML标签的数据源泉,Vue会自动将data里面的数据进行递归抓换成getter和setter，然后就可以自动更新HTML标签了</p>
<h2 id="1-2-computed"><a href="#1-2-computed" class="headerlink" title="1.2 computed"></a>1.2 computed</h2><p>Vue的计算属性（computed)的属性会自动混入Vue的实例中。所有 getter 和 setter 的 this 上下文自动地绑定为 Vue 实例。这就很强大了，再计算属性中定义的函数里面可以直接使用指向了vue实例的this<br>Vue检测到<strong>数据发生变动</strong>时就会执行对相应数据有引用的函数<br>应用：利用computed可以做一些监控之类的效果<br>computed vs methods vs watch<br>我们可以使用 methods 来替代 computed，效果上两个都是一样的，但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。<br>computed是在HTML DOM加载后马上执行的，如赋值；<br>而methods则必须要有一定的触发条件才能执行，如点击事件；<br>watch呢？它用于观察Vue实例上的数据变动。对应一个对象，键是观察表达式，值是对应回调。值也可以是方法名，或者是对象，包含选项。<br>所以他们的执行顺序为：默认加载的时候先computed再watch，不执行methods；等触发某一事件后，则是：先methods再watch。</p>
<h2 id="1-3-methods"><a href="#1-3-methods" class="headerlink" title="1.3 methods"></a>1.3 methods</h2><p>methods 将被混入到 Vue 实例中。可以直接通过 VM 实例访问这些方法，或者在指令表达式中使用。方法中的 this 自动绑定为 Vue 实例。<br><strong>注意，不应该使用箭头函数来定义method函数,理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向Vue实例，this.a 将是 undefined</strong></p>
<h2 id="1-4-watch"><a href="#1-4-watch" class="headerlink" title="1.4 watch"></a>1.4 watch</h2><p>一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 $watch()，遍历 watch 对象的每一个属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">    <span class="comment">// 监控a变量变化的时候，自动执行此函数</span></div><div class="line">    a: <span class="function"><span class="keyword">function</span> (<span class="params">val, oldVal</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'new: %s, old: %s'</span>, val, oldVal)</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 深度 watcher</span></div><div class="line">    c: &#123;</div><div class="line">      <span class="attr">handler</span>: <span class="function"><span class="keyword">function</span> (<span class="params">val, oldVal</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;,</div><div class="line">      <span class="attr">deep</span>: <span class="literal">true</span> <span class="comment">//对象内部的属性监听，也叫深度监听,数组的改变不需要使用深度watch</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p><strong>//注意，不应该使用箭头函数来定义 watcher 函数 (例如 searchQuery: newValue =&gt; this.updateAutocomplete(newValue))。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this.updateAutocomplete 将是 undefined。</strong></p>
<h2 id="1-5-设置el的详解"><a href="#1-5-设置el的详解" class="headerlink" title="1.5 设置el的详解"></a>1.5 设置el的详解</h2><p>如果这个选项在实例化时有作用，实例将立即进入编译过程，否则，需要显式调用 vm.$mount()(动态添加el)手动开启编译</p>
<h1 id="2、Vue实例的生命周期"><a href="#2、Vue实例的生命周期" class="headerlink" title="2、Vue实例的生命周期"></a>2、Vue实例的生命周期</h1><p>Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、卸载等一系列过程，我们称这是Vue的生命周期。通俗说就是Vue实例从创建到销毁的过程，就是生命周期</p>
<h2 id="2-1-beforeCreate"><a href="#2-1-beforeCreate" class="headerlink" title="2.1 beforeCreate"></a>2.1 beforeCreate</h2><p>应用：可以在这加个loading事件<br>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用</p>
<h2 id="2-2-created"><a href="#2-2-created" class="headerlink" title="2.2 created"></a>2.2 created</h2><p>应用：在这结束loading，还做一些初始化，实现函数自执行<br>实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见</p>
<h2 id="2-3-beforeMount"><a href="#2-3-beforeMount" class="headerlink" title="2.3 beforeMount"></a>2.3 beforeMount</h2><p>在挂载开始之前被调用：相关的 render 函数首次被调用。</p>
<h2 id="2-4-mounted"><a href="#2-4-mounted" class="headerlink" title="2.4 mounted"></a>2.4 mounted</h2><p>应用：在这发起后端请求，拿回数据，配合路由钩子做一些事情<br>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。</p>
<h2 id="2-5-beforeUpdate"><a href="#2-5-beforeUpdate" class="headerlink" title="2.5 beforeUpdate"></a>2.5 beforeUpdate</h2><p>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p>
<h2 id="2-6-update"><a href="#2-6-update" class="headerlink" title="2.6 update"></a>2.6 update</h2><p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p>
<h2 id="2-7-beforeDestroy"><a href="#2-7-beforeDestroy" class="headerlink" title="2.7 beforeDestroy"></a>2.7 beforeDestroy</h2><p>实例销毁之前调用。在这一步，实例仍然完全可用</p>
<h2 id="2-8-destroy"><a href="#2-8-destroy" class="headerlink" title="2.8 destroy"></a>2.8 destroy</h2><p>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如需要设置数据监听、编译模板、挂载实例到 DOM、在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，给予用户机会在一些特定的场景下添加他们自己的代码。&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS随笔</title>
    <link href="http://yoursite.com/2017/11/22/JS%E9%9A%8F%E7%AC%94/"/>
    <id>http://yoursite.com/2017/11/22/JS随笔/</id>
    <published>2017-11-22T05:40:48.000Z</published>
    <updated>2017-12-28T07:07:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在阅读博客过程中的JavaScript疑惑记录</strong><br><a id="more"></a></p>
<h1 id="js立即执行函数的写法"><a href="#js立即执行函数的写法" class="headerlink" title="js立即执行函数的写法"></a>js立即执行函数的写法</h1><p>立即执行函数其实就是直接调用匿名函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="number">1</span>);</div><div class="line">    &#125;()</div><div class="line">); </div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="number">1</span>);</div><div class="line">&#125;)(); </div><div class="line"></div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="number">1</span>);</div><div class="line">&#125;(); </div><div class="line"></div><div class="line"><span class="keyword">void</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="number">2</span>);</div><div class="line">&#125;();</div></pre></td></tr></table></figure></p>
<h1 id="javascript执行机制"><a href="#javascript执行机制" class="headerlink" title="javascript执行机制"></a>javascript执行机制</h1><p><strong>javascript是一门单线程语言，在最新的HTML5中提出了Web-Worker，但javascript是单线程这一核心仍未改变。所以一切javascript版的”多线程”都是用单线程模拟出来的</strong></p>
<ol>
<li>js任务：</li>
</ol>
<ul>
<li>同步任务（当我们打开网站时，网页的渲染过程就是一大堆同步任务，比如页面骨架和页面元素的渲染）、</li>
<li>异步任务（加载图片音乐之类占用资源大耗时久的任务，就是异步任务）</li>
</ul>
<p><img src="/2017/11/22/JS随笔/js.png" alt="执行机制"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> data = [];</div><div class="line">$.ajax(&#123;</div><div class="line">    <span class="attr">url</span>:www.javascript.com,</div><div class="line">    <span class="attr">data</span>:data,</div><div class="line">    <span class="attr">success</span>:<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'发送成功!'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'代码执行结束'</span>);</div><div class="line"><span class="comment">//ajax进入Event Table，注册回调函数success</span></div><div class="line"><span class="comment">//执行console.log('代码执行结束')</span></div><div class="line"><span class="comment">//ajax事件完成，回调函数success进入Event Queue</span></div><div class="line"><span class="comment">//主线程从Event Queue读取回调函数success并执行</span></div></pre></td></tr></table></figure></p>
<ol>
<li>setTimeout(在指定的毫秒数后调用函数或计算表达式)(异步)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'延时3秒'</span>);</div><div class="line">&#125;,<span class="number">3000</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行，意思就是不用再等多少秒了，只要主线程执行栈内的同步任务全部执行完成，栈为空就马上执行。<br>3.setInterval<br><strong>可按照指定的周期（以毫秒计）来调用函数或计算表达式,setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭.</strong><br>对于执行顺序来说，setInterval会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待<br>4.Promise与process.nextTick(callback)<br><strong>Promise就是一个对象，用来传递异步操作的消息。它代表了某个未来才会知道结果的事件（通常是一个异步操作），并且这个事件提供统一的 API，可供进一步处理</strong><br><strong>process.nextTick(callback)在事件循环的下一次循环中调用 callback 回调函数</strong><br>macro-task(宏任务)：包括整体代码script，setTimeout，setInterval<br>micro-task(微任务)：Promise，process.nextTick<br><img src="/2017/11/22/JS随笔/mask.png" alt="mask"></p>
<h1 id="javascript预解析"><a href="#javascript预解析" class="headerlink" title="javascript预解析"></a>javascript预解析</h1><p><strong>预解析是把带有var和function关键字的事先声明，但不会赋值</strong></p>
<ul>
<li>var：只要是通过var定义的，不管是变量，还是函数，都是先赋值undefined，如果是变量，也不管变量有没有赋值，在预解析阶段，都是会被赋值为undefined；</li>
<li>function：function进行预解析的时候，不仅是声明而且还定义（define）了，但是它存储的数据的那个空间里面存储的是代码是字符串，没有任何意义；</li>
</ul>
<p>1.变量声明提前；<br>2.function优先于var<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">alert(a);</div><div class="line">a();</div><div class="line"><span class="keyword">var</span> a=<span class="number">3</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="number">10</span>)</div><div class="line">&#125;   </div><div class="line">alert(a);</div><div class="line">a=<span class="number">6</span>;</div><div class="line">a(); </div><div class="line"><span class="comment">//刚开始，a就是function a()&#123;alert(10)&#125; ，就会看到这个函数</span></div><div class="line"><span class="comment">//alert(10)</span></div><div class="line"><span class="comment">//alert(3)</span></div><div class="line"><span class="comment">//报错，a已经不是函数</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">alert(a);</div><div class="line">a();</div><div class="line"><span class="keyword">var</span> a=<span class="number">3</span>;</div><div class="line"><span class="keyword">var</span> a=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="number">10</span>)</div><div class="line">&#125; ;  </div><div class="line">alert(a);</div><div class="line">a=<span class="number">6</span>;</div><div class="line">a();</div><div class="line"><span class="comment">//undefined</span></div><div class="line"><span class="comment">//报错</span></div></pre></td></tr></table></figure>
<p>3.声明式函数与赋值式函数，区别在于：在JS的预编译期，声明式函数将会先被提取出来，然后才按顺序执行js代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">f();</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;           <span class="comment">//声明式函数</span></div><div class="line"> alert(<span class="number">2</span>);</div><div class="line">&#125;</div><div class="line">f1();</div><div class="line"><span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">//赋值式函数</span></div><div class="line"> alert(<span class="number">2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>作用域：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(a);</div><div class="line">    <span class="keyword">var</span> a=<span class="number">3</span></div><div class="line">&#125;</div><div class="line">aa();</div><div class="line"><span class="comment">//underfind  在aa函数里面，有var a=3，那么在aa作用域里面，就是把a这个变量声明提前，但是不会赋值，所以是underfind</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">    alert(a);</div><div class="line">    <span class="keyword">var</span> a=<span class="number">3</span></div><div class="line">&#125;</div><div class="line">aa(<span class="number">5</span>);</div><div class="line">alert(a)</div><div class="line"><span class="comment">//5,0   在函数体内，参数a的优先级高于变量a</span></div></pre></td></tr></table></figure>
<p>数据排列：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">num</span>(<span class="params">n,m</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(n);</div><div class="line">    <span class="keyword">if</span>(n&lt;m)&#123;</div><div class="line">        num(n+<span class="number">1</span>,m);</div><div class="line">        <span class="built_in">console</span>.log(n);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">num(<span class="number">2</span>,<span class="number">5</span>)  <span class="comment">//2345432</span></div></pre></td></tr></table></figure></p>
<p>其它：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line"> setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line"> &#125;, <span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(i);</div><div class="line"><span class="comment">//这个大家就要小心一点了，答案是5    55555</span></div><div class="line"><span class="comment">//在setTimeout执行之前，for循环早就执行完了，i的值早已经是5了，所以一开始是执行，最后面的console.log(i);</span></div><div class="line"><span class="comment">//在for循环的时候一下子自定义5个setTimeout，大概一秒后，就是输出55555</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line"> (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123; <span class="comment">// j = i</span></div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(j);</div><div class="line">  &#125;, <span class="number">1000</span>);</div><div class="line"> &#125;)(i);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(i); </div><div class="line"><span class="comment">//这里的解析和上面基本一样，只是用闭包来记录每一次循环的i,</span></div><div class="line"><span class="comment">//所以答案是5     01234</span></div></pre></td></tr></table></figure>
<p>let的局部作用域：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line"> setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line"> &#125;, <span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(i);</div><div class="line"><span class="comment">//结果是  报错   01234</span></div></pre></td></tr></table></figure></p>
<h1 id="JS异常"><a href="#JS异常" class="headerlink" title="JS异常"></a>JS异常</h1><p>Javascript执行过程：</p>
<ol>
<li>当前代码块将作为一个任务压入任务队列中，JS线程会不断地从任务队列中提取任务执行。</li>
<li>当任务执行过程中出现异常，且异常没有捕获处理，则会一直沿着调用栈一层层向外抛出，最终终止当前任务的执行。</li>
<li>JS线程会<b>继续</b>从任务队列中提取下一个任务继续执行。</li>
</ol>
<p>对于 Javascript 而言，我们面对的仅仅只是异常，异常的出现不会直接导致 JS 引擎崩溃，最多只会使当前执行的任务终止。</p>
<p><b>脚本错误一般分为两种：语法错误(SyntaxError)，运行时错误。几种异常监控的处理方式：</b></p>
<ul>
<li><b>try-catch 异常处理</b><br>通过给代码块进行 try-catch 进行包装后，当代码块发生出错时 catch 将能捕捉到错误的信息，页面也将可以继续执行。但try-catch只能捕获捉到<b>运行时非异步错误</b>，对于语法错误和异步错误就捕捉不到。</li>
<li><b>window.onerror 异常处理</b><br>window.onerror 捕获异常能力比 try-catch 稍微强点，无论是异步还是非异步错误，onerror 都能捕获到运行时错误,对于语法错误还是无能为力.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">msg, url, row, col, error</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'我知道错误了'</span>);</div><div class="line">  <span class="built_in">console</span>.log(&#123;</div><div class="line">    msg,  url,  row, col, error</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;</div><div class="line">error;<span class="comment">/* 运行时同步错误 */</span></div><div class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">msg, url, row, col, error</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'我知道异步错误了'</span>);</div><div class="line">  <span class="built_in">console</span>.log(&#123;</div><div class="line">    msg,  url,  row, col, error</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;</div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  error;</div><div class="line">&#125;);<span class="comment">/* 异步错误 */</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>1、 对于 onerror 这种全局捕获，最好写在所有 JS 脚本的前面，因为你无法保证你写的代码是否出错，如果写在后面，一旦发生错误的话是不会被 onerror 捕获到的<br>2、 onerror 是无法捕获到网络异常的错误</p>
<p><b>在实际的使用过程中，onerror 主要是来捕获预料之外的错误，而 try-catch 则是用来在可预见情况下监控特定的错误，两者结合使用更加高效。</b></p>
<ul>
<li>Promise 错误<br>通过 Promise 可以帮助我们解决异步回调异常的问题，但是一旦 Promise 实例抛出异常而你没有用 catch 去捕获的话，onerror 或 try-catch 也无能为力，无法捕捉到错误<br>在写 Promise 实例的时候养成最后写上 catch 函数是个好习惯，如果你的应用用到很多的 Promise 实例的话，最好添加一个 Promise 全局异常捕获事件 unhandledrejection。</li>
</ul>
<h1 id="window-load-、window-onload-function-、-document-ready-和windo、和document的区别"><a href="#window-load-、window-onload-function-、-document-ready-和windo、和document的区别" class="headerlink" title="$(window).load()、window.onload=function(){}、$(document).ready()和windo、和document的区别"></a>$(window).load()、window.onload=function(){}、$(document).ready()和windo、和document的区别</h1><p>1、$(window).load() 和window.onload=function(){}是页面中的所有元素（包括图片、flash）等都加载完毕后，才能执行；$(document).ready() 是页面中的DOM元素加载完成后便可执行。<br>2、$(window).load()和window.onload=function(){}不同的是，前者可以和$(document).ready()一样，可以同时加载多个函数。<br>3、window代表的是浏览器窗口，即可视的浏览器窗口；document代表的是整个页面的dom元素；即document只是window的一个属性；<br>4、两者的区别在页面有滚动条时可以直观的显示出来，当出现滚动条时，$(window).height和$(document).height是不相等的，$(document).height比$(window).height大，因为window的高度始终都是可见的浏览器窗口的高度，而document的高度则是整个页面的dom元素的高度，即超出一屏幕了。<br>5、当某一触发事件，需要页面的所有元素都加载完毕后才执行，并且元素不是通过ajax回调填充的情况下，使用$(window).load()即可。<br>6、当某一触发事件，需要页面的所有元素都加载完毕后才执行，并且元素是通过ajax回调填充的情况下，使用$(window).load()会出现有时有效，有时无效的情况.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;在阅读博客过程中的JavaScript疑惑记录&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6  学习笔记</title>
    <link href="http://yoursite.com/2017/11/15/ES6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/11/15/ES6-学习笔记/</id>
    <published>2017-11-15T09:42:06.000Z</published>
    <updated>2017-12-01T01:55:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><b>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</b><br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES6</span></div><div class="line">input.map(<span class="function"><span class="params">item</span> =&gt;</span> item + <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// ES5</span></div><div class="line">input.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> item + <span class="number">1</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="1、let"><a href="#1、let" class="headerlink" title="1、let"></a>1、let</h1><ol>
<li><p>表明函数内部的变量i与循环变量i不在同一个作用域，有各自单独的作用域:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">  <span class="keyword">let</span> i = <span class="string">'abc'</span>;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">// abc</span></div><div class="line"><span class="comment">// abc</span></div><div class="line"><span class="comment">// abc</span></div></pre></td></tr></table></figure>
</li>
<li><p>不存在变量提升<br>var命令会发生”变量提升“现象，即变量可以在声明之前使用，值为undefined；<br>let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。</p>
</li>
<li>暂时性死区<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  tmp = <span class="string">'abc'</span>; <span class="comment">// ReferenceError</span></div><div class="line">  <span class="keyword">let</span> tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错；<br>“暂时性死区”也意味着typeof不再是一个百分之百安全的操作.暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p>
<ol>
<li>不允许重复声明<br>let不允许在相同作用域内，重复声明同一个变量,因此，不能在函数内部重新声明参数</li>
<li>块级作用域<br>ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景：  第一种场景，内层变量可能会覆盖外层变量；第二种场景，用来计数的循环变量泄露为全局变量；<br>ES6 允许块级作用域的任意嵌套，内层作用域可以定义外层作用域的同名变量，外层作用域无法读取内层作用域的变量，块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要。<br>ES6 引入了块级作用域，明确允许在块级作用域之中声明函数。ES6 规定，块级作用域之中，函数声明语句的行为类似于let，在块级作用域之外不可引用。<br>本质上，块级作用域是一个语句，将多个操作封装在一起，没有返回值，但是，在块级作用域以外，没有办法得到t的值，因为块级作用域不返回值，除非t是全局变量。现在有一个提案，使得块级作用域可以变为表达式，也就是说可以返回值，办法就是在块级作用域之前加上do，使它变为do表达式，然后就会返回内部最后执行的表达式的值。<br>ES6 的块级作用域允许声明函数的规则，只在使用大括号的情况下成立，如果没有使用大括号，就会报错<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> x = <span class="keyword">do</span> &#123;</div><div class="line">  <span class="keyword">let</span> t = f();</div><div class="line">  t * t + <span class="number">1</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="2、const-声明一个只读的常量-一旦声明，常量的值就不能改变"><a href="#2、const-声明一个只读的常量-一旦声明，常量的值就不能改变" class="headerlink" title="2、const(声明一个只读的常量,一旦声明，常量的值就不能改变)"></a>2、const(声明一个只读的常量,一旦声明，常量的值就不能改变)</h1><p><strong>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动</strong></p>
<ol>
<li>const一旦声明变量，就必须立即初始化；</li>
<li>const也与let一样只在声明所在的块级作用域内有效，同样存在暂时性死区，只能在声明的位置后面使用；</li>
<li>const也与let一样不可重复声明；</li>
<li>但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制.<br><strong>ES5 只有两种声明变量的方法：var、function；ES6 除了添加let和const命令，还有两种声明变量的方法：import、class，所以，ES6 一共有 6 种声明变量的方法</strong></li>
</ol>
<h1 id="3、顶层对象"><a href="#3、顶层对象" class="headerlink" title="3、顶层对象"></a>3、顶层对象</h1><ol>
<li>顶层对象，在浏览器环境指的是window对象，在Node指的是global对象。ES5之中，顶层对象的属性与全局变量是等价的。</li>
<li>ES6 为了改变这一点，一方面规定，为了保持兼容性，var命令和function命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性</li>
</ol>
<h1 id="4、global-对象"><a href="#4、global-对象" class="headerlink" title="4、global 对象"></a>4、global 对象</h1><p>在语言标准的层面，引入global作为顶层对象。也就是说，在所有环境下，global都是存在的，都可以从它拿到顶层对象</p>
<h1 id="5、数组的结构赋值"><a href="#5、数组的结构赋值" class="headerlink" title="5、数组的结构赋值"></a>5、数组的结构赋值</h1><p><strong>事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值/strong&gt;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];<span class="comment">/*等价*/</span></div><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</div><div class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</div></pre></td></tr></table></figure></strong></p>
<ol>
<li>解构赋值允许指定默认值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>]; <span class="comment">// x='a', y='b'</span></div><div class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>, <span class="literal">undefined</span>]; <span class="comment">// x='a', y='b</span></div><div class="line"><span class="keyword">let</span> [x = <span class="number">1</span>] = [<span class="literal">null</span>];<span class="comment">/*如果一个数组成员是null，默认值就不会生效，因为null不严格等于undefined。*/</span></div><div class="line">x <span class="comment">// null</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><b>如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。</b></p>
<ol>
<li>对象的解构赋值</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;b&gt;ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
