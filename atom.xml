<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sansan.blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-15T09:28:00.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>三三</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES6常用语法</title>
    <link href="http://yoursite.com/2017/11/15/ES6%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2017/11/15/ES6常用语法/</id>
    <published>2017-11-15T07:52:05.000Z</published>
    <updated>2017-11-15T09:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>总结的es6常用的一些常用的语法和比es5优越的方面，可能只是es6新特性的10%-20%，但是开发上占了80%左右的。</strong><br><a id="more"></a></p>
<h1 id="1、”let”-vs-“var”、”const”"><a href="#1、”let”-vs-“var”、”const”" class="headerlink" title="1、”let”  vs  “var”、”const”"></a>1、”let”  vs  “var”、”const”</h1><p>let有块级作用域的的区分概念;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//相当于声明了一个全局的i变量。</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//j只在这个for循环有效，如果在循环外调用就会报错</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)&#123;</div><div class="line">    <span class="built_in">console</span>.log(j)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>const初始化赋值之后就不能再改变赋值,用在引用插件，库，或者模块化开发上,在开发上可以由于重名而带来的异常<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> url = required(<span class="string">'httpUrl'</span>);</div></pre></td></tr></table></figure></p>
<h1 id="2、arrow-function"><a href="#2、arrow-function" class="headerlink" title="2、arrow function"></a>2、arrow function</h1><p>  当使用箭头函数时，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。（比如上面提到的实例，setTimeout里面的this，原本指向window，但是使用的箭头函数，就指向ecDo这个对象）<br>原因是箭头函数没有this，它的this是继承外面的，因此内部的this就是外层代码块的this；而ES5的函数里的this是使用时所在的对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//es6写法-隐式返回</span></div><div class="line">sumArr (arr) </div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span>pre + cur)</div><div class="line">&#125;</div><div class="line"><span class="comment">//es6写法-显式返回</span></div><div class="line">sumArr(arr) </div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span>&#123;<span class="keyword">return</span> pre + cur&#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">//es5写法</span></div><div class="line">sumArr: <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">pre, cur</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> pre + cur</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="3、template-string（模板字符串）"><a href="#3、template-string（模板字符串）" class="headerlink" title="3、template string（模板字符串）"></a>3、template string（模板字符串）</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="keyword">return</span> <span class="string">`剩余时间<span class="subst">$&#123;d&#125;</span>天<span class="subst">$&#123;h&#125;</span>小时<span class="subst">$&#123;m&#125;</span>分钟<span class="subst">$&#123;s&#125;</span>秒"`</span>;</div><div class="line">$(<span class="string">"#test"</span>).append(</div><div class="line">  <span class="string">`&lt;p&gt;</span></div><div class="line">      这是&lt;i&gt;<span class="subst">$&#123;obj.author&#125;</span>&lt;/i&gt;</div><div class="line">      写的一个实例。这个实例是为了</div><div class="line">      &lt;i&gt; <span class="subst">$&#123;obj.thing&#125;</span>&lt;/i&gt;</div><div class="line">      &lt;span&gt;写作日期是：<span class="subst">$&#123;obj.time&#125;</span>&lt;/span&gt;</div><div class="line">   &lt;/p&gt;`</div><div class="line">);</div><div class="line"><span class="comment">//ES5</span></div><div class="line"><span class="keyword">return</span> <span class="string">"剩余时间"</span> + d + <span class="string">"天 "</span> + h + <span class="string">"小时 "</span> + m + <span class="string">" 分钟"</span> + s + <span class="string">" 秒"</span>;</div></pre></td></tr></table></figure>
<h1 id="4、destructuring（结构赋值）"><a href="#4、destructuring（结构赋值）" class="headerlink" title="4、destructuring（结构赋值）"></a>4、destructuring（结构赋值）</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//es5</span></div><div class="line"><span class="keyword">var</span> name=<span class="string">'守候'</span>;</div><div class="line"><span class="keyword">var</span> sex=<span class="string">'男'</span>;</div><div class="line"><span class="keyword">var</span> info= &#123;<span class="attr">name</span>:name, <span class="attr">sex</span>: sex&#125;;</div><div class="line"><span class="built_in">console</span>.log(info) <span class="comment">//Object &#123;name: "守候", sex: "男"&#125;</span></div><div class="line"></div><div class="line"><span class="comment">//es6</span></div><div class="line"><span class="keyword">let</span> name=<span class="string">'守候'</span>;</div><div class="line"><span class="keyword">let</span> sex=<span class="string">'男'</span>;</div><div class="line"><span class="keyword">let</span> info= &#123;name, sex&#125;;</div><div class="line"><span class="built_in">console</span>.log(info)  <span class="comment">//Object &#123;name: "守候", sex: "男"&#125; </span></div><div class="line"></div><div class="line"><span class="comment">//es6也可以反过来 </span></div><div class="line"><span class="keyword">let</span> info=&#123;<span class="attr">name</span>: <span class="string">"守候"</span>, <span class="attr">sex</span>: <span class="string">"男"</span>&#125;;</div><div class="line"><span class="keyword">let</span> &#123;name,sex&#125;=info;</div><div class="line"><span class="built_in">console</span>.log(name,sex)<span class="comment">// "守候" "男"</span></div></pre></td></tr></table></figure>
<h1 id="5、default（函数参数的默认值）-rest"><a href="#5、default（函数参数的默认值）-rest" class="headerlink" title="5、default（函数参数的默认值）, rest"></a>5、default（函数参数的默认值）, rest</h1><ol>
<li><p>default<br>参数变量是默认声明的，所以不能用let或const再次声明。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">x, y = <span class="string">'world'</span></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(x, y);</div><div class="line">&#125;</div><div class="line"></div><div class="line">log(<span class="string">'Hello'</span>);   <span class="comment">// Hello world</span></div><div class="line">log(<span class="string">'Hello'</span>, <span class="string">'China'</span>);  <span class="comment">// Hello China</span></div><div class="line">log(<span class="string">'Hello'</span>, <span class="string">''</span>);   <span class="comment">// Hello</span></div></pre></td></tr></table></figure>
</li>
<li><p>rest<br>Rest操作符和Spread操作都是用三个点（…）表示，但作用整好相反。<br>Rest操作符一般用在函数参数的声明中，而Spread用在函数的调用中；<br>使用 Rest 参数，ES6 为我们提供一种新的方式来创建可变参数的函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">input</span>(<span class="params">...params</span>)</span>&#123;  </div><div class="line">    <span class="built_in">console</span>.log(params)  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">input(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)  <span class="comment">//[1,2,3,4]  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">input2</span>(<span class="params">a,b,...params</span>)</span>&#123;  </div><div class="line">    <span class="built_in">console</span>.log(params)  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">input2(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)  <span class="comment">//[3,4]</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>rest参数作用： 将多余的逗号分隔的参数序列转换为数组参数<br>注意： rest参数必须是最后一个参数，否则报错</p>
<h1 id="6、export-amp-import（对应的特性就是，模块化开发）"><a href="#6、export-amp-import（对应的特性就是，模块化开发）" class="headerlink" title="6、export &amp; import（对应的特性就是，模块化开发）"></a>6、export &amp; import（对应的特性就是，模块化开发）</h1><p>封装模块的时候，用export把模块暴露出去，需要使用的时候，用import引进行来</p>
<h1 id="7、常用API"><a href="#7、常用API" class="headerlink" title="7、常用API"></a>7、常用API</h1><h2 id="7-1-字符串"><a href="#7-1-字符串" class="headerlink" title="7.1 字符串"></a>7.1 字符串</h2><p>1.1 repeat<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将原字符串重复n次</span></div><div class="line"><span class="string">'守候'</span>.repeat(<span class="number">3</span>)</div></pre></td></tr></table></figure></p>
<p>1.2 includes &amp; startsWith &amp; endsWith</p>
<blockquote>
<p>includes：是否找到了参数字符串,返回布尔值。<br>startsWith：参数字符串是否在原字符串的头部,返回布尔值。<br>endsWith：参数字符串是否在原字符串的尾部,返回布尔值。</p>
</blockquote>
<p>三个方法都接受两个参数，第一个参数是参数字符串，第二个是开始检索的位置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">'我就是守候'</span>;</div><div class="line">str.startsWith(<span class="string">'我就是'</span>)<span class="comment">//true</span></div><div class="line">str.startsWith(<span class="string">'我'</span>,<span class="number">2</span>)<span class="comment">//false</span></div><div class="line">str.endsWith(<span class="string">'守候'</span>)<span class="comment">//true</span></div><div class="line">str.includes(<span class="string">'守候'</span>)<span class="comment">//true</span></div><div class="line">str.includes(<span class="string">'我'</span>,<span class="number">3</span>)<span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>1.3 padStart &amp; padEnd</p>
<blockquote>
<p>padStart:如果字符串不够指定长度，在头部补全指定字符<br>padEnd：如果字符串不够指定长度，在尾部补全指定字符</p>
</blockquote>
<p>两个方法都接收两个参数，第一个是指定字符串的最小长度，第二个用来补全的字符串。<br>如果指定字符串的长度，等于或大于指定的最小长度（第一个参数）。就直接返回原字符串，如果忽略第二个参数，就使用空格补全原字符串！<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">'守候'</span>;</div><div class="line">str.padEnd(<span class="number">10</span>,<span class="string">'123'</span>)<span class="comment">//"守候12312312"</span></div><div class="line">str.padStart(<span class="number">10</span>,<span class="string">'123'</span>)<span class="comment">//"12312312守候"</span></div><div class="line">str.padEnd(<span class="number">10</span>)<span class="comment">//"守候        "</span></div><div class="line">str.padStart(<span class="number">10</span>)<span class="comment">//"        守候"</span></div><div class="line">str.padStart(<span class="number">1</span>)<span class="comment">//"守候"</span></div><div class="line">str.padEnd(<span class="number">1</span>)<span class="comment">//"守候"</span></div></pre></td></tr></table></figure></p>
<p>1.4 isNaN(检查一个值是否为NaN)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>)<span class="comment">//true</span></div><div class="line"><span class="built_in">Number</span>.isNaN(<span class="number">15</span>)<span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>1.5 isInteger(判断一个值是否为整数,需要注意的是，比如1和1.0都是整数)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Number</span>.isInteger(<span class="number">1</span>)<span class="comment">//true</span></div><div class="line"><span class="built_in">Number</span>.isInteger(<span class="number">1.0</span>)<span class="comment">//true</span></div><div class="line"><span class="built_in">Number</span>.isInteger(<span class="number">1.1</span>)<span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>1.6 sign(判断一个数到底是正数、负数、还是零)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.sign(<span class="number">-10</span>)<span class="comment">// -1</span></div><div class="line"><span class="built_in">Math</span>.sign(<span class="number">10</span>)<span class="comment">// +1</span></div><div class="line"><span class="built_in">Math</span>.sign(<span class="number">0</span>)<span class="comment">// +0</span></div><div class="line"><span class="built_in">Math</span>.sign(<span class="number">-0</span>)<span class="comment">// -0</span></div><div class="line"><span class="built_in">Math</span>.sign(<span class="literal">NaN</span>)<span class="comment">// NaN</span></div><div class="line"><span class="built_in">Math</span>.sign(<span class="string">'10'</span>)<span class="comment">// +1</span></div><div class="line"><span class="built_in">Math</span>.sign(<span class="string">'守候'</span>)<span class="comment">// NaN</span></div><div class="line"><span class="built_in">Math</span>.sign(<span class="string">''</span>)<span class="comment">// 0</span></div><div class="line"><span class="built_in">Math</span>.sign(<span class="literal">true</span>)<span class="comment">// +1</span></div><div class="line"><span class="built_in">Math</span>.sign(<span class="literal">false</span>)<span class="comment">// 0</span></div><div class="line"><span class="built_in">Math</span>.sign(<span class="literal">null</span>)<span class="comment">// 0</span></div></pre></td></tr></table></figure></p>
<p>1.7 trunc(去除一个数的小数部分，返回整数部分)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.trunc(<span class="number">1.1</span>)<span class="comment">//1</span></div><div class="line"><span class="built_in">Math</span>.trunc(<span class="number">-1.1</span>)<span class="comment">//-1</span></div><div class="line"><span class="built_in">Math</span>.trunc(<span class="number">-0.1</span>)<span class="comment">//-0</span></div><div class="line"><span class="built_in">Math</span>.trunc(<span class="string">'123.456'</span>)<span class="comment">//123</span></div><div class="line"><span class="built_in">Math</span>.trunc(<span class="string">'守候'</span>)<span class="comment">//NaN</span></div></pre></td></tr></table></figure></p>
<h2 id="7-2-对象"><a href="#7-2-对象" class="headerlink" title="7.2 对象"></a>7.2 对象</h2><p>2.1 assign(将源对象（ source ）的所有可枚举属性，复制到目标对象（ target ）)<br>第一个参数是目标对象，后面的参数都是源对象,如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> info1=&#123;<span class="attr">name</span>:<span class="string">'守'</span>,<span class="attr">sex</span>:<span class="string">'男'</span>&#125;,info2=&#123;<span class="attr">name</span>:<span class="string">'候'</span>,<span class="attr">city</span>:<span class="string">'广州'</span>&#125;;</div><div class="line"><span class="built_in">Object</span>.assign(info1,info2)<span class="comment">//&#123;name: "候", sex: "男", city: "广州"&#125;</span></div></pre></td></tr></table></figure></p>
<p>2.2 keys、values、entries<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//根据对象自身可遍历的键名进行遍历，返回一个数组</span></div><div class="line"><span class="keyword">var</span> info=&#123;<span class="attr">name</span>: <span class="string">"守候"</span>, <span class="attr">sex</span>: <span class="string">"男"</span>, <span class="attr">city</span>: <span class="string">"广州"</span>&#125;;</div><div class="line"><span class="built_in">Object</span>.keys(info)<span class="comment">//["name", "sex", "city"]</span></div><div class="line"><span class="comment">//根据对象自身可遍历的键值进行遍历，返回一个数组</span></div><div class="line"><span class="built_in">Object</span>.values(info)<span class="comment">//["守候", "男", "广州"]</span></div><div class="line"><span class="comment">//根据对象自身可遍历的键值对进行遍历，返回一个数组</span></div><div class="line"><span class="built_in">Object</span>.entries(info)<span class="comment">//[["name", "守候"],["sex", "男"],["city", "广州"]]</span></div></pre></td></tr></table></figure></p>
<h2 id="7-3-数组"><a href="#7-3-数组" class="headerlink" title="7.3 数组"></a>7.3 数组</h2><p>3.1 from(将两类对象转为真正的数组)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.from(<span class="string">'守候'</span>)<span class="comment">//["守", "候"]</span></div><div class="line"><span class="comment">//常见的使用方式还有-将Dom集合和arguments转成真正的数组</span></div><div class="line"><span class="keyword">let</span> oLi = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>);</div><div class="line"><span class="built_in">Array</span>.from(oLi ).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(item);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// arguments对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//顺便说下Set</span></div><div class="line"><span class="keyword">let</span> newSet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>,<span class="string">'a'</span>,<span class="string">'c'</span>]);</div><div class="line"><span class="built_in">Array</span>.from(newSet) <span class="comment">// ['a', 'b','c'] </span></div><div class="line"><span class="comment">//ES6 新增的数据结构--Set。它类似于数组，但是成员的值都是唯一的，不重复的。</span></div><div class="line"><span class="comment">//相信大家很容易想到怎么用了，比如数组去重，用Set实现就简单多了。   </span></div><div class="line">removeRepeatArray(arr) </div><div class="line">&#123;</div><div class="line">    <span class="comment">//return [Array.from(arr)]</span></div><div class="line">    <span class="keyword">return</span> [...new <span class="built_in">Set</span>(arr)]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3.2 find(找出第一个符合条件的数组成员,如果没找到符合条件的成员就返回underfind)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].find(<span class="function">(<span class="params">n</span>) =&gt;</span> n &gt; <span class="number">2</span>)<span class="comment">//3</span></div></pre></td></tr></table></figure></p>
<p>3.3 findIndex(找出第一个符合条件的数组成员的索引)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一个大于2的成员的索引</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].findIndex(<span class="function">(<span class="params">n</span>) =&gt;</span> n &gt; <span class="number">2</span>)<span class="comment">//2</span></div></pre></td></tr></table></figure></p>
<p>3.4 includes(某个数组是否包含给定的值，返回一个布尔值,如果没找到符合条件的成员就返回underfind)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>)<span class="comment">//true</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">5</span>)<span class="comment">//false</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>)<span class="comment">//true</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;总结的es6常用的一些常用的语法和比es5优越的方面，可能只是es6新特性的10%-20%，但是开发上占了80%左右的。&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>maven学习</title>
    <link href="http://yoursite.com/2017/11/13/maven%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/11/13/maven学习/</id>
    <published>2017-11-13T07:22:53.000Z</published>
    <updated>2017-11-15T09:33:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。</strong><br><a id="more"></a></p>
<h1 id="1、pom-xml详解"><a href="#1、pom-xml详解" class="headerlink" title="1、pom.xml详解"></a>1、pom.xml详解</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.medical.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="comment">&lt;!-- 项目的包名--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>模块名<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- 版本号 --&gt;</span></div></pre></td></tr></table></figure>
<p>依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="2、maven常用的构建命令"><a href="#2、maven常用的构建命令" class="headerlink" title="2、maven常用的构建命令"></a>2、maven常用的构建命令</h1><blockquote>
<p>mvn -v : 查看版本；<br>mvn compile : 编译<br>mvn test : 测试<br>mvn package : 打包<br>mvn clean : 删除target(编译项目主代码)<br>mvn install : 安装jar包到本地仓库</p>
</blockquote>
<h1 id="3、maven的生命周期"><a href="#3、maven的生命周期" class="headerlink" title="3、maven的生命周期"></a>3、maven的生命周期</h1><p>一个完整的项目构建过程包括清理、编译、 测试、打包、集成测试、验证、部署<br><strong>maven生命周期：</strong></p>
<ol>
<li>clean :清理项目；<br>1.1 pre-clean : 执行清理前的工作；<br>1.2 clean : 情理上一次构件生成的所有文件<br>1.3 post-clean : 执行清理后的文件</li>
<li>default :构建项目（核心）；<br>比如compile、test、package、install等等</li>
<li>site :生成项目站点；<br>3.1 pre-site : 在生成项目站点前要完成的工作；<br>3.2 site : 生成项目的站点文档<br>3.3 post-site : 在生成项目站点后要完成的工作<br>3.4 site-deploy : 发布生成的站点到服务器上</li>
</ol>
<h1 id="4、运用Maven的plugin-jetty来部署"><a href="#4、运用Maven的plugin-jetty来部署" class="headerlink" title="4、运用Maven的plugin:jetty来部署"></a>4、运用Maven的plugin:jetty来部署</h1><ol>
<li><p>在节点<build><plugins>…</plugins></build>中配置Jetty插件依赖如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jetty-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">webAppSourceDirectory</span>&gt;</span>$&#123;basedir&#125;/src/main/webapp<span class="tag">&lt;/<span class="name">webAppSourceDirectory</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>右击项目 –&gt; Run As –&gt; Maven Build… –&gt; Goals  输入：jetty:run 即可：</p>
</li>
<li>打开浏览器输入：<a href="http://localhost:8080/myweb/" target="_blank" rel="external">http://localhost:8080/myweb/</a> 即可验证web项目是否启动正常。</li>
</ol>
<h1 id="5、使用Tomcat部署"><a href="#5、使用Tomcat部署" class="headerlink" title="5、使用Tomcat部署"></a>5、使用Tomcat部署</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 在打包成功后使用jetty:run来运行jrtty服务 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="6、在打包成功后使用jetty-run来运行jrtty服务-tomcat同"><a href="#6、在打包成功后使用jetty-run来运行jrtty服务-tomcat同" class="headerlink" title="6、在打包成功后使用jetty:run来运行jrtty服务(tomcat同)"></a>6、在打包成功后使用jetty:run来运行jrtty服务(tomcat同)</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jetty-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 在打包成功后使用jetty:run来运行jrtty服务 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<p>右击项目 –&gt; Run As –&gt; Maven Build… –&gt; Goals  输入：clean package 即可</p>
<h1 id="7、使用maven构建web项目"><a href="#7、使用maven构建web项目" class="headerlink" title="7、使用maven构建web项目"></a>7、使用maven构建web项目</h1><ol>
<li>new -&gt; project -&gt; maven project -&gt;webapp…</li>
<li>new -&gt; source folder -&gt;java、test/java、test/resource</li>
<li>右击项目 -&gt; proporities -&gt;project Facted -&gt;</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端小知识点</title>
    <link href="http://yoursite.com/2017/10/20/%E5%89%8D%E7%AB%AF%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2017/10/20/前端小知识点/</id>
    <published>2017-10-20T05:46:37.000Z</published>
    <updated>2017-10-20T05:49:29.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>##1、解决谷歌浏览器记住密码后input输入框背景变为黄色<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-webkit-autofill</span> &#123; </div><div class="line">    <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0px</span> <span class="number">1000px</span> white inset; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##1、解决谷歌浏览器记住密码后input输入框背景变为黄色&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java复习--SSM框架</title>
    <link href="http://yoursite.com/2017/09/15/java%E5%A4%8D%E4%B9%A0-SSM%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2017/09/15/java复习-SSM框架/</id>
    <published>2017-09-15T01:16:16.000Z</published>
    <updated>2017-09-20T02:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/09/15/java复习-SSM框架/JavaReview.png" alt="logo"><br><strong>由于现在的工作是前端，毕业设计之后半年都没有写过Java，但又不想就此荒废掉，便趁空隙复习并学习一下如今比较常用的SSM框架，整合三大框架并简单应用。</strong><br><a id="more"></a></p>
<h1 id="1、SSM的基本概念"><a href="#1、SSM的基本概念" class="headerlink" title="1、SSM的基本概念"></a>1、SSM的基本概念</h1><p>SSM是由Spring、SpringMVC、MyBatis三大框架构成</p>
<ol>
<li>Spring<br>Spring由Rod Johnson创建，是为解决业务逻辑层和其他各层的松耦合问题，Spring是一个分层的JavaSE/EEfull-stack(一站式) 轻量级开源框架。简单来说，Spring是一个轻量级的控制反转（IoC）和面向切面（AOP）的容器框架。</li>
<li>SpringMVC<br>Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用Spring进行WEB开发时，可以选择使用Spring的SpringMVC框架或集成其他MVC开发框架，如Struts1，Struts2等。</li>
<li>MyBatics<br>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。<h1 id="2、环境搭建（MAC）"><a href="#2、环境搭建（MAC）" class="headerlink" title="2、环境搭建（MAC）"></a>2、环境搭建（MAC）</h1>1.安装JDK<br>去官网下载Mac专用的JDK并安装，然后在命令行使用<strong>open .bash_profile</strong>打开.bash_profile文件，配置环境变量如下：<br><img src="/2017/09/15/java复习-SSM框架/environment.png" alt="environment"><br>在命令行使用<strong>source .bash_profile</strong>使得修改立即生效，环境变量配置完成后，在终端输入java -version，若有如下<br><img src="/2017/09/15/java复习-SSM框架/javaVersion.png" alt="version"><br>版本号信息出现即为安装成功。<br>2.下载eclipse for Java EE<br>官网下载，直接解压即可<br>3.修改eclipse里面默认的mac的jdk<br>Eclipse -&gt; preferences -&gt; java -&gt; installed JRES 修改为我们下载的JDK地址即可<br>4.安装tomcat<br>官网下载，并配置环境（和配置JDK环境变量类似）<br><img src="/2017/09/15/java复习-SSM框架/tomcat.png" alt="tomcat"><br>然后在终端进入Tomcat的bin目录下执行 sh startup.sh启动Tomcat，在浏览器输入<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> 若能进入Tomcat页面即为安装成功。<br>最后在eclipse中配置Tomcat：eclipse -&gt; preferences -&gt; Server -&gt; Runtime Environments -&gt; add配置Tomcat安装目录 -&gt; 新建Server<h1 id="3、SSM框架整合"><a href="#3、SSM框架整合" class="headerlink" title="3、SSM框架整合"></a>3、SSM框架整合</h1>1.新建Web项目<br>2.引入SSM需要的JAR包</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/09/15/java复习-SSM框架/JavaReview.png&quot; alt=&quot;logo&quot;&gt;&lt;br&gt;&lt;strong&gt;由于现在的工作是前端，毕业设计之后半年都没有写过Java，但又不想就此荒废掉，便趁空隙复习并学习一下如今比较常用的SSM框架，整合三大框架并简单应用。&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>简单理解Javascript闭包</title>
    <link href="http://yoursite.com/2017/09/13/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3Javascript%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2017/09/13/简单理解Javascript闭包/</id>
    <published>2017-09-13T06:21:04.000Z</published>
    <updated>2017-09-19T07:16:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/09/13/简单理解Javascript闭包/closure.png" alt="logo"><br><strong>闭包（Closure）是Javascript的重点，也是难点，在这里记录下来是希望自己能够每看一次便多一次更深刻的理解</strong><br><a id="more"></a></p>
<h2 id="1、闭包的概念"><a href="#1、闭包的概念" class="headerlink" title="1、闭包的概念"></a>1、闭包的概念</h2><p>官方对闭包的解释是：一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。<br><strong>函数套函数就是闭包吗？不是！，当一个内部函数被其外部函数之外的变量引用时，才会形成了一个闭包。</strong><br>要理解闭包，首先必须理解Javascript特殊的变量作用域。</p>
<h2 id="2、变量的作用域"><a href="#2、变量的作用域" class="headerlink" title="2、变量的作用域"></a>2、变量的作用域</h2><p>Javascript变量的作用于有两种：全局变量和局部变量；<br>1.函数内部可以直接读取全局变量；<br>2.在函数外部无法读取函数内的局部变量；<br><strong><del>函数内部声明变量的时候，一定要使用var命令，否则会变成全局变量</del></strong><br>为了读取函数内部的变量，可以在函数内部定义一个函数，那么子函数就可以读取父函数内的局部变量，再将子函数作为父函数的返回值，最终我们就得到了函数内部的局部变量。</p>
<h2 id="3、闭包"><a href="#3、闭包" class="headerlink" title="3、闭包"></a>3、闭包</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">　　　　nAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          n+=<span class="number">1</span></div><div class="line">        &#125;</div><div class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　alert(n);</div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">return</span> f2;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">var</span> result=f1();</div><div class="line">　　result(); <span class="comment">// 999</span></div><div class="line">　　nAdd();<span class="comment">// nAdd前面没有使用var关键字，因此nAdd是一个全局变量，全局变量的调用者时window。其次，nAdd的值是一个匿名函数，这个匿名函数本身也是一个闭包,可以在函数外部对函数内部的局部变量进行操作</span></div><div class="line">　　result(); <span class="comment">// 1000</span></div></pre></td></tr></table></figure>
<h2 id="4、闭包的用途"><a href="#4、闭包的用途" class="headerlink" title="4、闭包的用途"></a>4、闭包的用途</h2><p>1.可以读取函数内部的变量；<br>2.让变量的值始终保持在内存中；</p>
<h2 id="5、使用注意"><a href="#5、使用注意" class="headerlink" title="5、使用注意"></a>5、使用注意</h2><p>1.闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。所以在退出函数之前，将不使用的局部变量全部删除；<br>2.闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法，把内部变量当作它的私有属性，这时一定要小心，不要随便改变父函数内部变量的值。</p>
<h2 id="6、闭包经典案例"><a href="#6、闭包经典案例" class="headerlink" title="6、闭包经典案例"></a>6、闭包经典案例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</div><div class="line">　　<span class="keyword">var</span> object = &#123;</div><div class="line">　　　　<span class="attr">name</span> : <span class="string">"My Object"</span>,</div><div class="line">　　　　<span class="attr">getNameFunc</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　　　<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">　　　　　　&#125;;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;;<span class="comment">//object.getNameFunc()是一个返回函数，没有var声明也是一个匿名函数，是全局变量，window调用</span></div><div class="line">　　alert(object.getNameFunc()());<span class="comment">//The Window</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</div><div class="line">　　<span class="keyword">var</span> object = &#123;</div><div class="line">　　　　<span class="attr">name</span> : <span class="string">"My Object"</span>,</div><div class="line">　　　　<span class="attr">getNameFunc</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　<span class="keyword">var</span> that = <span class="keyword">this</span>;<span class="comment">//this为object</span></div><div class="line">　　　　　　<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　　　<span class="keyword">return</span> that.name;</div><div class="line">　　　　　　&#125;;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;;<span class="comment">//that=this,this=object,so that=object;object调用</span></div><div class="line">　　alert(object.getNameFunc()());<span class="comment">//My Object</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/09/13/简单理解Javascript闭包/closure.png&quot; alt=&quot;logo&quot;&gt;&lt;br&gt;&lt;strong&gt;闭包（Closure）是Javascript的重点，也是难点，在这里记录下来是希望自己能够每看一次便多一次更深刻的理解&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue-simple-uploader上传组件的使用</title>
    <link href="http://yoursite.com/2017/08/29/vue-simple-uploader%E4%B8%8A%E4%BC%A0%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/08/29/vue-simple-uploader上传组件的使用/</id>
    <published>2017-08-29T06:27:58.000Z</published>
    <updated>2017-09-19T07:19:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/08/29/vue-simple-uploader上传组件的使用/vue-simple-uploader.png" alt="logo"><br><strong>在Vue项目中引入vue-simple-uploader上传组件，后台使用node.js</strong><br><a href="https://github.com/sansansine/semanui.git" target="_blank" rel="external">https://github.com/sansansine/semanui.git</a><br><a id="more"></a></p>
<h2 id="1、搭建Vue前端项目"><a href="#1、搭建Vue前端项目" class="headerlink" title="1、搭建Vue前端项目"></a>1、搭建Vue前端项目</h2><p><img src="http://ot0rfbzcd.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-16%20%E4%B8%8A%E5%8D%889.18.05.png" alt="使用Vue-cli脚手架"></p>
<h2 id="2、vue-simple-uploader安装"><a href="#2、vue-simple-uploader安装" class="headerlink" title="2、vue-simple-uploader安装"></a>2、vue-simple-uploader安装</h2><blockquote>
<p>npm install vue-simple-uploader -save_scroll</p>
</blockquote>
<h2 id="3、在main-js中引入组件"><a href="#3、在main-js中引入组件" class="headerlink" title="3、在main.js中引入组件"></a>3、在main.js中引入组件</h2><blockquote>
<p>import uploader from ‘vue-simple-uploader’<br>Vue.use(uploader)</p>
</blockquote>
<h2 id="4、新建up-vue单页"><a href="#4、新建up-vue单页" class="headerlink" title="4、新建up.vue单页"></a>4、新建up.vue单页</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">uploader</span> <span class="attr">:options</span>=<span class="string">"options"</span> <span class="attr">class</span>=<span class="string">"uploader-example"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uploader-unsupport</span>&gt;</span><span class="tag">&lt;/<span class="name">uploader-unsupport</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uploader-drop</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Drop files here to upload or<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">uploader-btn</span>&gt;</span>select files<span class="tag">&lt;/<span class="name">uploader-btn</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">uploader-btn</span> <span class="attr">:attrs</span>=<span class="string">"attrs"</span>&gt;</span>select images<span class="tag">&lt;/<span class="name">uploader-btn</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">uploader-btn</span> <span class="attr">:directory</span>=<span class="string">"true"</span>&gt;</span>select folder<span class="tag">&lt;/<span class="name">uploader-btn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">uploader-drop</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uploader-list</span>&gt;</span><span class="tag">&lt;/<span class="name">uploader-list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">uploader</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  export default &#123;</div><div class="line">    data () &#123;</div><div class="line">      return &#123;</div><div class="line">        options: &#123;</div><div class="line">          target: &apos;//localhost:3000/upload&apos;,</div><div class="line">          testChunks: false</div><div class="line">        &#125;,</div><div class="line">        attrs: &#123;</div><div class="line">          accept: &apos;image/*&apos;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">  <span class="selector-class">.uploader-example</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">880px</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">40px</span> auto <span class="number">0</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(0, 0, 0, .4);</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.uploader-example</span> <span class="selector-class">.uploader-btn</span> &#123;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">4px</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.uploader-example</span> <span class="selector-class">.uploader-list</span> &#123;</div><div class="line">    <span class="attribute">max-height</span>: <span class="number">440px</span>;</div><div class="line">    <span class="attribute">overflow</span>: auto;</div><div class="line">    <span class="attribute">overflow-x</span>: hidden;</div><div class="line">    <span class="attribute">overflow-y</span>: auto;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.uploader-file-name</span> &#123;</div><div class="line">    <span class="attribute">text-align</span>: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5、使用express搭建Node-js后台"><a href="#5、使用express搭建Node-js后台" class="headerlink" title="5、使用express搭建Node.js后台"></a>5、使用express搭建Node.js后台</h2><p><a href="https://github.com/simple-uploader/Uploader/tree/develop/samples/Node.js" target="_blank" rel="external">参考地址：https://github.com/simple-uploader/Uploader/tree/develop/samples/Node.js
</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/08/29/vue-simple-uploader上传组件的使用/vue-simple-uploader.png&quot; alt=&quot;logo&quot;&gt;&lt;br&gt;&lt;strong&gt;在Vue项目中引入vue-simple-uploader上传组件，后台使用node.js&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/sansansine/semanui.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/sansansine/semanui.git&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Vue.js实现登录拦截</title>
    <link href="http://yoursite.com/2017/08/12/%E4%BD%BF%E7%94%A8Vue-js%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%8B%A6%E6%88%AA/"/>
    <id>http://yoursite.com/2017/08/12/使用Vue-js实现登录拦截/</id>
    <published>2017-08-12T08:59:50.000Z</published>
    <updated>2017-09-19T07:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/08/12/使用Vue-js实现登录拦截/vue-lanjie.png" alt="logo"></p>
<p><strong>Vue.js做前台，node.js做后端，应用Vuex、axios实现的简单登录拦截</strong><br><a href="https://github.com/sansansine/vogue.git" target="_blank" rel="external">https://github.com/sansansine/vogue.git</a><br><a id="more"></a></p>
<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h3 id="1、搭建Vue前端项目"><a href="#1、搭建Vue前端项目" class="headerlink" title="1、搭建Vue前端项目"></a>1、搭建Vue前端项目</h3><p><img src="http://ot0rfbzcd.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-16%20%E4%B8%8A%E5%8D%889.18.05.png" alt="使用Vue-cli脚手架"></p>
<h3 id="2、-npm安装element-ui、Vuex、axios等依赖和组件并引入"><a href="#2、-npm安装element-ui、Vuex、axios等依赖和组件并引入" class="headerlink" title="2、 npm安装element-ui、Vuex、axios等依赖和组件并引入"></a>2、 npm安装element-ui、Vuex、axios等依赖和组件并引入</h3><blockquote>
<p>npm i element-ui -S<br>npm install vuex –save<br>npm install axios</p>
</blockquote>
<p><strong> main.js中组件和依赖引入：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span></div><div class="line"><span class="keyword">import</span> VueAwesomeSwiper <span class="keyword">from</span> <span class="string">'vue-awesome-swiper'</span></div><div class="line"><span class="keyword">import</span> <span class="string">'../theme/index.css'</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></div><div class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></div><div class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./vuex/store.js'</span></div><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></div><div class="line"></div><div class="line">Vue.use(ElementUI)</div><div class="line">Vue.use(VueAwesomeSwiper)</div><div class="line">Vue.use(Vuex)</div></pre></td></tr></table></figure></p>
<h3 id="3、新建login-vue单页"><a href="#3、新建login-vue单页" class="headerlink" title="3、新建login.vue单页"></a>3、新建login.vue单页</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">el-form</span>  <span class="attr">:model</span>=<span class="string">"loginForm"</span> <span class="attr">:rules</span>=<span class="string">"rules"</span> <span class="attr">ref</span>=<span class="string">"loginForm"</span> <span class="attr">label-width</span>=<span class="string">"80px"</span> &gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"login-head"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">el-input</span>  <span class="attr">v-model</span>=<span class="string">"loginForm.name"</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">"pwd"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"loginForm.pwd"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">class</span>=<span class="string">"login-btn"</span> @<span class="attr">click</span>=<span class="string">"submitForm('loginForm')"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">import</span> &#123; USER_SIGNIN &#125; <span class="keyword">from</span> <span class="string">'../vuex/modules/user'</span></div><div class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">'../fetch/axios.js'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">loginForm</span>: &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">pwd</span>: <span class="string">''</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">rules</span>: &#123;</div><div class="line">        <span class="attr">name</span>: [</div><div class="line">          &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'用户名必填'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span>&#125;</div><div class="line">        ],</div><div class="line">        <span class="attr">pwd</span>: [</div><div class="line">          &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入密码'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span>&#125;,</div><div class="line">          &#123;<span class="attr">min</span>: <span class="number">6</span>, <span class="attr">max</span>: <span class="number">16</span>, <span class="attr">message</span>: <span class="string">'密码在6到16位之间'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span>&#125;</div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">methods</span>: &#123;</div><div class="line">    ...mapActions([USER_SIGNIN]),</div><div class="line">    submitForm (formName) &#123;</div><div class="line">      <span class="keyword">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (valid) &#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'val'</span>)</div><div class="line">          <span class="keyword">let</span> opt = <span class="keyword">this</span>.loginForm</div><div class="line">          api.Login(opt)</div><div class="line">              .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">                <span class="keyword">if</span> (res) &#123;</div><div class="line">                  <span class="keyword">this</span>.$message(&#123;</div><div class="line">                    <span class="attr">type</span>: <span class="string">'success'</span>,</div><div class="line">                    <span class="attr">message</span>: <span class="string">'登录成功'</span></div><div class="line">                  &#125;)</div><div class="line">                  <span class="keyword">this</span>.USER_SIGNIN(<span class="keyword">this</span>.loginForm)</div><div class="line">                  <span class="keyword">this</span>.$router.replace(<span class="string">'/one'</span>)</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                  <span class="comment">// element-ui消息提示</span></div><div class="line">                  <span class="keyword">this</span>.$message(&#123;</div><div class="line">                    <span class="attr">type</span>: <span class="string">'info'</span>,</div><div class="line">                    <span class="attr">message</span>: <span class="string">'密码错误！'</span></div><div class="line">                  &#125;)</div><div class="line">                &#125;</div><div class="line">              &#125;)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'not val'</span>)</div><div class="line">          <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">  <span class="selector-class">.login</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">40%</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">5%</span> <span class="number">25%</span> <span class="number">5%</span> <span class="number">25%</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#f9dba4</span>;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> <span class="number">#f3daae</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">60px</span> <span class="number">20px</span> <span class="number">60px</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.login-head</span>&#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">0px</span> <span class="number">20px</span> <span class="number">0px</span>;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">background</span>: orange;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">15px</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.login-btn</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">165px</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">15px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.el-form-item__content</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span> <span class="meta">!important</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h2><h3 id="1、安装express"><a href="#1、安装express" class="headerlink" title="1、安装express"></a>1、安装express</h3><blockquote>
<p>npm install -g express<br>npm install -g express-generator</p>
</blockquote>
<h3 id="2、在Vue项目下新建文件夹service做服务器"><a href="#2、在Vue项目下新建文件夹service做服务器" class="headerlink" title="2、在Vue项目下新建文件夹service做服务器"></a>2、在Vue项目下新建文件夹service做服务器</h3><p>1.新建db.js连接数据库<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">mysql</span>: &#123;</div><div class="line">      <span class="attr">host</span>: <span class="string">'localhost'</span>,</div><div class="line">      <span class="attr">user</span>: <span class="string">'root'</span>,</div><div class="line">      <span class="attr">password</span>: <span class="string">'123456'</span>,</div><div class="line">      <span class="attr">database</span>:<span class="string">'vogue'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.新建app.js作为express服务器入口<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> userApi = <span class="built_in">require</span>(<span class="string">'./api/userApi'</span>);</div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"></div><div class="line">app.use(bodyParser.json());</div><div class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</div><div class="line"></div><div class="line"><span class="comment">// 设置响应头</span></div><div class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</div><div class="line">    res.header(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"PUT,POST,GET,DELETE,OPTIONS"</span>);</div><div class="line">    res.header(<span class="string">'Access-Control-Allow-Headers'</span>,<span class="string">'x-requested-with,content-type,Access-Control-Allow-Origin'</span>);</div><div class="line">    res.header(<span class="string">"X-Powered-By"</span>,<span class="string">' 3.2.1'</span>)</div><div class="line">    res.header(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf-8"</span>);</div><div class="line">    next();</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//注册api路由</span></div><div class="line">app.use(<span class="string">'/api/user'</span>, userApi);</div><div class="line"></div><div class="line"><span class="comment">// 监听端口</span></div><div class="line">app.listen(<span class="number">3000</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'success listen at port:3000......'</span>);</div></pre></td></tr></table></figure></p>
<p>3.新建sqlMap.js作为SQL语句映射文件供api逻辑调用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sqlMap = &#123;</div><div class="line">    <span class="comment">// 用户</span></div><div class="line">    user: &#123;</div><div class="line">        <span class="attr">add</span>: <span class="string">'select * from user where name = ? AND pwd = ?'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = sqlMap;</div></pre></td></tr></table></figure></p>
<p>4.新建userApi.js作为前端调用接口<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> models = <span class="built_in">require</span>(<span class="string">'../db/db'</span>);</div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> router = express.Router();</div><div class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</div><div class="line"><span class="keyword">var</span> $sql = <span class="built_in">require</span>(<span class="string">'../db/sqlMap'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 连接数据库</span></div><div class="line"><span class="keyword">var</span> conn = mysql.createConnection(models.mysql);</div><div class="line"></div><div class="line">conn.connect();</div><div class="line"><span class="keyword">var</span> jsonWrite = <span class="function"><span class="keyword">function</span>(<span class="params">res, ret</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> ret === <span class="string">'undefined'</span>) &#123;</div><div class="line">        res.json(&#123;</div><div class="line">            <span class="attr">code</span>: <span class="string">'1'</span>,</div><div class="line">            <span class="attr">msg</span>: <span class="string">'操作失败'</span></div><div class="line">        &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        res.json(ret);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 增加用户接口</span></div><div class="line">router.post(<span class="string">'/addUser'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="keyword">var</span> sql = $sql.user.add;</div><div class="line">    <span class="keyword">var</span> params = req.body;</div><div class="line">    <span class="built_in">console</span>.log(params);</div><div class="line">    <span class="keyword">var</span> success = <span class="literal">false</span>;</div><div class="line">    conn.query(sql, [params.name, params.pwd], <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(result);</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'err'</span>);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (result.length&lt;=<span class="number">0</span>) &#123;</div><div class="line">          success = <span class="literal">false</span>;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'fail'</span>);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">          success = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        jsonWrite(res, success);</div><div class="line"></div><div class="line">    &#125;)</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 增加用户接口</span></div><div class="line">router.get(<span class="string">'/addUser'</span>, (req, res) =&gt; &#123;</div><div class="line">     res.send(<span class="string">'retrunJson'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure></p>
<p>5.进入service目录下安装相关依赖</p>
<blockquote>
<p>npm install  mysql body-parser</p>
</blockquote>
<h2 id="跨域声明"><a href="#跨域声明" class="headerlink" title="跨域声明"></a>跨域声明</h2><p><strong> 在Vue项目下找到文件configindex.js，添加：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">proxyTable: &#123;</div><div class="line">        <span class="string">'/api'</span>: &#123;</div><div class="line">            <span class="attr">target</span>: <span class="string">'http://127.0.0.1:3000/api/'</span>,</div><div class="line">            <span class="attr">changeOrigin</span>: <span class="literal">true</span>,<span class="comment">//true允许跨域</span></div><div class="line">            pathRewrite: &#123;</div><div class="line">                <span class="string">'^/api'</span>: <span class="string">''</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="登录测试"><a href="#登录测试" class="headerlink" title="登录测试"></a>登录测试</h2><p><strong> 在service目录下启动后台：</strong></p>
<blockquote>
<p>nodemon app.js</p>
</blockquote>
<p><strong> 启动Vue项目： </strong></p>
<blockquote>
<p>npm run dev</p>
</blockquote>
<p><del>访问<a href="http://localhost:8080/#/" target="_blank" rel="external">http://localhost:8080/#/</a> 输入并登陆</del></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/08/12/使用Vue-js实现登录拦截/vue-lanjie.png&quot; alt=&quot;logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vue.js做前台，node.js做后端，应用Vuex、axios实现的简单登录拦截&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/sansansine/vogue.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/sansansine/vogue.git&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Introduce the Semantic UI in Vue project</title>
    <link href="http://yoursite.com/2017/08/11/Introduce-the-Semantic-UI-in-Vue-project/"/>
    <id>http://yoursite.com/2017/08/11/Introduce-the-Semantic-UI-in-Vue-project/</id>
    <published>2017-08-11T03:27:42.000Z</published>
    <updated>2017-09-19T07:32:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/08/11/Introduce-the-Semantic-UI-in-Vue-project/semantic-ui.png" alt="logo"><br><strong>在Vue项目中引入前端框架semantic-ui</strong><br><a href="https://github.com/sansansine/semanui.git" target="_blank" rel="external">https://github.com/sansansine/semanui.git</a><br><a id="more"></a></p>
<p>1.jQuery install</p>
<blockquote>
<p>npm install –save jquery</p>
</blockquote>
<p>2.webpack.dev.config.js添加如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// plugins 区块内</span></div><div class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123;</div><div class="line">  <span class="attr">$</span>              : <span class="string">"jquery"</span>,</div><div class="line">  <span class="attr">jquery</span>         : <span class="string">"jquery"</span>,</div><div class="line">  <span class="attr">jQuery</span>         : <span class="string">"jquery"</span>,</div><div class="line">  <span class="string">"window.jQuery"</span>: <span class="string">"jquery"</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>3.引入jQuery需要填的坑</p>
<ul>
<li><p>webpack.base.conf.js文件添加：</p>
<blockquote>
<p>var webpack = require(‘webpack’)</p>
</blockquote>
</li>
<li><p>main.js里导入jQuery:</p>
<blockquote>
<p>import ‘jquery’</p>
</blockquote>
</li>
<li><p>.eslintrc.js文件中添加：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">env: &#123;</div><div class="line">  <span class="comment">// 原有</span></div><div class="line">  browser: <span class="literal">true</span>,</div><div class="line">  <span class="comment">// 添加</span></div><div class="line">  jquery: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>4.安装 semantic-ui-css</p>
<blockquote>
<p>npm install semantic-ui-css –save</p>
</blockquote>
<p>5.在 webpack.dev.config.js中添加<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">plugins: [</div><div class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</div><div class="line">      ...</div><div class="line">      <span class="comment">// Semantic-UI</span></div><div class="line">      semantic     : <span class="string">'semantic-ui-css'</span>,</div><div class="line">      <span class="attr">Semantic</span>     : <span class="string">'semantic-ui-css'</span>,</div><div class="line">      <span class="string">'semantic-ui'</span>: <span class="string">'semantic-ui-css'</span></div><div class="line">    &#125;),</div><div class="line">  ]</div></pre></td></tr></table></figure></p>
<p>6.在main.js中引入 css 和 js 文件<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import semantic from <span class="string">'../node_modules/semantic-ui-css/semantic.min.js'</span></div><div class="line">import <span class="string">'../node_modules/semantic-ui-css/semantic.min.css'</span></div></pre></td></tr></table></figure></p>
<p>7.finally test it!(add a new .vue)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"semantic-component"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui selection dropdown semanticDropDown"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">v-model</span>=<span class="string">"selected"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"dropdown icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"default text"</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">:data-value</span>=<span class="string">"item.Value"</span></span></div><div class="line">             <span class="attr">v-for</span>=<span class="string">"item in items"</span></div><div class="line">             @<span class="attr">click</span>=<span class="string">"changeSelection(item)"</span>&gt;</div><div class="line">          &#123;&#123; item.Gender &#125;&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;&#123; JSON.stringify(selectedItem) &#125;&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    data () &#123;</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">items</span>: [</div><div class="line">          &#123;<span class="attr">Gender</span>: <span class="string">'Male'</span>, <span class="attr">Value</span>: <span class="number">1</span>&#125;,</div><div class="line">          &#123;<span class="attr">Gender</span>: <span class="string">'Female'</span>, <span class="attr">Value</span>: <span class="number">0</span>&#125;</div><div class="line">        ],</div><div class="line">        <span class="attr">selected</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">selecteditem</span>: &#123;&#125;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">      changeSelection (item) &#123;</div><div class="line">        <span class="keyword">this</span>.selectedItem = item</div><div class="line">        <span class="keyword">this</span>.selected = item.Value</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    mounted () &#123;</div><div class="line">      <span class="keyword">this</span>.selecteditem = &#123;&#125;</div><div class="line">      $(<span class="string">'.semanticDropDown'</span>).dropdown()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><del>Semantic-UI引入完成</del></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/08/11/Introduce-the-Semantic-UI-in-Vue-project/semantic-ui.png&quot; alt=&quot;logo&quot;&gt;&lt;br&gt;&lt;strong&gt;在Vue项目中引入前端框架semantic-ui&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/sansansine/semanui.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/sansansine/semanui.git&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue轮播图插件vue-awesome-swiper的使用</title>
    <link href="http://yoursite.com/2017/07/20/Vue%E8%BD%AE%E6%92%AD%E5%9B%BE%E6%8F%92%E4%BB%B6vue-awesome-swiper%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/07/20/Vue轮播图插件vue-awesome-swiper的使用/</id>
    <published>2017-07-20T03:37:20.000Z</published>
    <updated>2017-09-12T10:00:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/07/20/Vue轮播图插件vue-awesome-swiper的使用/vue-awesome-swiper.png" alt="logo"><br><strong>Vue轮播图插件vue-awesome-swiper的引入和简单使用</strong><br><a href="https://github.com/sansansine/vogue.git" target="_blank" rel="external">https://github.com/sansansine/vogue.git</a><br><a id="more"></a></p>
<h2 id="1、Use-Setup"><a href="#1、Use-Setup" class="headerlink" title="1、Use Setup"></a>1、Use Setup</h2><blockquote>
<p>npm install vue-awesome-swiper –save</p>
</blockquote>
<h2 id="2、main-js-import"><a href="#2、main-js-import" class="headerlink" title="2、main.js-import"></a>2、main.js-import</h2><blockquote>
<p>import VueAwesomeSwiper from ‘vue-awesome-swiper’<br>Vue.use(VueAwesomeSwiper)</p>
</blockquote>
<h2 id="3、-vue页面中声明参数"><a href="#3、-vue页面中声明参数" class="headerlink" title="3、.vue页面中声明参数"></a>3、.vue页面中声明参数</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">import &#123; swiper, swiperSlide &#125; from <span class="string">'vue-awesome-swiper'</span></div><div class="line">export default&#123;</div><div class="line">  <span class="symbol">name:</span> <span class="string">'one'</span>,</div><div class="line">  <span class="symbol">components:</span> &#123;</div><div class="line">    swiper,</div><div class="line">    swiperSlide</div><div class="line">  &#125;,</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="regexp">//</span> <span class="symbol">currentDate:</span> new Date(),</div><div class="line">      <span class="symbol">items:</span> [<span class="string">'../static/banner1.jpg'</span>, <span class="string">'../static/banner2.jpg'</span>, <span class="string">'../static/banner3.jpg'</span>],</div><div class="line">      <span class="symbol">swiperOption:</span> &#123;</div><div class="line">        <span class="symbol">autoplay:</span> <span class="number">3000</span>,</div><div class="line">        <span class="symbol">pagination:</span> <span class="string">'.swiper-pagination'</span>,</div><div class="line">        <span class="symbol">slidesPerView:</span> <span class="string">'auto'</span>,</div><div class="line">        <span class="symbol">centeredSlides:</span> <span class="literal">true</span>,</div><div class="line">        <span class="symbol">paginationClickable:</span> <span class="literal">true</span>,</div><div class="line">        <span class="symbol">onSlideChangeEnd:</span> swiper =&gt; &#123;</div><div class="line">          this.page = swiper.realIndex + <span class="number">1</span></div><div class="line">          this.index = swiper.realIndex</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="symbol">swiperSlides:</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="symbol">computed:</span> &#123;</div><div class="line">    swiper () &#123;</div><div class="line">      <span class="keyword">return</span> this.$refs.mySwiper.swiper</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  mounted () &#123;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/07/20/Vue轮播图插件vue-awesome-swiper的使用/vue-awesome-swiper.png&quot; alt=&quot;logo&quot;&gt;&lt;br&gt;&lt;strong&gt;Vue轮播图插件vue-awesome-swiper的引入和简单使用&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/sansansine/vogue.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/sansansine/vogue.git&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Using vue.js to build the first simple website</title>
    <link href="http://yoursite.com/2017/07/06/Using-vue-js-to-build-the-first-simple-website/"/>
    <id>http://yoursite.com/2017/07/06/Using-vue-js-to-build-the-first-simple-website/</id>
    <published>2017-07-06T02:22:29.000Z</published>
    <updated>2017-09-12T09:13:45.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="1、Vue-js安装"><a href="#1、Vue-js安装" class="headerlink" title="1、Vue.js安装"></a>1、Vue.js安装</h2><blockquote>
<p>$ npm install vue</p>
</blockquote>
<h2 id="2、创建第一个项目"><a href="#2、创建第一个项目" class="headerlink" title="2、创建第一个项目"></a>2、创建第一个项目</h2><h3 id="使用官方命令行工具，快速搭建大型单页应用"><a href="#使用官方命令行工具，快速搭建大型单页应用" class="headerlink" title="使用官方命令行工具，快速搭建大型单页应用"></a>使用官方命令行工具，快速搭建大型单页应用</h3><blockquote>
<p>#全局安装vue-cli<br>$ npm install –global vue-cli</p>
<p>#创建一个基于webpack模板的新项目<br>$ vue init webpack project-name</p>
<p>#默认配置，回车即可</p>
</blockquote>
<h2 id="3、进入项目，安装并运行"><a href="#3、进入项目，安装并运行" class="headerlink" title="3、进入项目，安装并运行"></a>3、进入项目，安装并运行</h2><blockquote>
<p>$ cd project-name<br>$ npm install<br>$ npm run dev</p>
</blockquote>
<p>  <del>一个最简单的项目搭建完成啦</del></p>
]]></content>
    
    <summary type="html">
    
      Vue.js入门-第一个Vue项目：按照官网教程，使用Vue-cli脚手架搭建的一个Vue单页
    
    </summary>
    
    
  </entry>
  
</feed>
